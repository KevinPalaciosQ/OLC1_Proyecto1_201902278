
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DataForge_;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\006\000\002\015" +
    "\003\000\002\015\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\004\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\005\015\000\002\005" +
    "\015\000\002\004\003\000\002\004\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\056\011\000\002\057\003\000\002\013\010\000\002" +
    "\010\010\000\002\037\004\000\002\037\003\000\002\040" +
    "\014\000\002\040\014\000\002\040\014\000\002\040\016" +
    "\000\002\040\014\000\002\040\006\000\002\041\003\000" +
    "\002\041\005\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\043\003\000\002\043\005\000\002\044" +
    "\003\000\002\007\010\000\002\033\004\000\002\033\003" +
    "\000\002\034\014\000\002\034\016\000\002\034\006\000" +
    "\002\035\003\000\002\035\005\000\002\036\003\000\002" +
    "\036\003\000\002\013\007\000\002\045\004\000\002\045" +
    "\003\000\002\046\014\000\002\046\016\000\002\046\014" +
    "\000\002\046\014\000\002\046\014\000\002\046\006\000" +
    "\002\047\003\000\002\047\005\000\002\050\003\000\002" +
    "\050\003\000\002\051\003\000\002\051\005\000\002\052" +
    "\003\000\002\011\010\000\002\030\004\000\002\030\003" +
    "\000\002\012\014\000\002\012\014\000\002\012\016\000" +
    "\002\012\006\000\002\023\003\000\002\023\005\000\002" +
    "\025\003\000\002\025\003\000\002\027\003\000\002\027" +
    "\005\000\002\026\003\000\002\017\020\000\002\022\003" +
    "\000\002\022\005\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\010\000\002\003\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\006\000\002\054\006\000\002\054\006\000\002" +
    "\054\006\000\002\054\006\000\002\054\006\000\002\055" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\004\024\005\001\002\000\004\002\u015e\001" +
    "\002\000\022\003\022\027\030\037\011\057\021\060\027" +
    "\061\025\062\006\063\015\001\002\000\004\004\u0138\001" +
    "\002\000\024\003\uffff\025\uffff\027\uffff\037\uffff\057\uffff" +
    "\060\uffff\061\uffff\062\uffff\063\uffff\001\002\000\024\003" +
    "\ufff9\025\ufff9\027\ufff9\037\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\062\ufff9\063\ufff9\001\002\000\004\026\u0124\001\002\000" +
    "\024\003\ufff5\025\ufff5\027\ufff5\037\ufff5\057\ufff5\060\ufff5" +
    "\061\ufff5\062\ufff5\063\ufff5\001\002\000\024\003\ufff6\025" +
    "\ufff6\027\ufff6\037\ufff6\057\ufff6\060\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\001\002\000\024\003\ufffc\025\ufffc\027\ufffc\037" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\001\002" +
    "\000\026\003\uffea\025\uffea\026\u011e\027\uffea\037\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\001\002\000\024" +
    "\003\ufffd\025\ufffd\027\ufffd\037\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\062\ufffd\063\ufffd\001\002\000\024\003\ufff7\025\ufff7" +
    "\027\ufff7\037\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\063" +
    "\ufff7\001\002\000\024\003\022\025\u011c\027\030\037\011" +
    "\057\021\060\027\061\025\062\006\063\015\001\002\000" +
    "\004\004\347\001\002\000\004\006\346\001\002\000\024" +
    "\003\ufffb\025\ufffb\027\ufffb\037\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\062\ufffb\063\ufffb\001\002\000\024\003\ufffa\025\ufffa" +
    "\027\ufffa\037\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063" +
    "\ufffa\001\002\000\004\004\233\001\002\000\024\003\ufff4" +
    "\025\ufff4\027\ufff4\037\ufff4\057\ufff4\060\ufff4\061\ufff4\062" +
    "\ufff4\063\ufff4\001\002\000\004\004\122\001\002\000\004" +
    "\026\031\001\002\000\006\035\034\036\032\001\002\000" +
    "\004\033\120\001\002\000\004\026\035\001\002\000\004" +
    "\026\ufff1\001\002\000\004\026\036\001\002\000\004\066" +
    "\037\001\002\000\004\030\040\001\002\000\004\067\041" +
    "\001\002\000\026\007\044\010\045\011\046\012\054\013" +
    "\052\014\047\021\050\022\043\023\042\066\055\001\002" +
    "\000\004\025\uffee\001\002\000\004\025\uffef\001\002\000" +
    "\012\005\uffa3\007\uffa3\025\uffa3\034\uffa3\001\002\000\004" +
    "\004\113\001\002\000\004\004\106\001\002\000\004\004" +
    "\101\001\002\000\004\025\uffed\001\002\000\004\025\077" +
    "\001\002\000\004\004\072\001\002\000\004\025\070\001" +
    "\002\000\004\004\056\001\002\000\004\025\uffec\001\002" +
    "\000\026\007\044\010\045\011\046\012\054\013\052\014" +
    "\047\021\061\022\060\023\057\066\063\001\002\000\010" +
    "\005\uff9e\007\uff9e\034\uff9e\001\002\000\010\005\uffa1\007" +
    "\uffa1\034\uffa1\001\002\000\010\005\uff9f\007\uff9f\034\uff9f" +
    "\001\002\000\010\005\uffa2\007\uffa2\034\uffa2\001\002\000" +
    "\010\005\uffa0\007\uffa0\034\uffa0\001\002\000\004\007\065" +
    "\001\002\000\026\007\044\010\045\011\046\012\054\013" +
    "\052\014\047\021\061\022\060\023\057\066\063\001\002" +
    "\000\004\005\067\001\002\000\012\005\uffa6\007\uffa6\025" +
    "\uffa6\034\uffa6\001\002\000\004\006\071\001\002\000\024" +
    "\003\ufff3\025\ufff3\027\ufff3\037\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\062\ufff3\063\ufff3\001\002\000\026\007\044\010\045" +
    "\011\046\012\054\013\052\014\047\021\061\022\060\023" +
    "\057\066\063\001\002\000\004\007\074\001\002\000\026" +
    "\007\044\010\045\011\046\012\054\013\052\014\047\021" +
    "\061\022\060\023\057\066\063\001\002\000\004\005\076" +
    "\001\002\000\012\005\uffa5\007\uffa5\025\uffa5\034\uffa5\001" +
    "\002\000\004\006\100\001\002\000\024\003\ufff2\025\ufff2" +
    "\027\ufff2\037\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063" +
    "\ufff2\001\002\000\026\007\044\010\045\011\046\012\054" +
    "\013\052\014\047\021\061\022\060\023\057\066\063\001" +
    "\002\000\004\007\103\001\002\000\026\007\044\010\045" +
    "\011\046\012\054\013\052\014\047\021\061\022\060\023" +
    "\057\066\063\001\002\000\004\005\105\001\002\000\012" +
    "\005\uffa4\007\uffa4\025\uffa4\034\uffa4\001\002\000\026\007" +
    "\044\010\045\011\046\012\054\013\052\014\047\021\061" +
    "\022\060\023\057\066\063\001\002\000\004\007\110\001" +
    "\002\000\026\007\044\010\045\011\046\012\054\013\052" +
    "\014\047\021\061\022\060\023\057\066\063\001\002\000" +
    "\004\005\112\001\002\000\012\005\uffa7\007\uffa7\025\uffa7" +
    "\034\uffa7\001\002\000\026\007\044\010\045\011\046\012" +
    "\054\013\052\014\047\021\061\022\060\023\057\066\063" +
    "\001\002\000\004\007\115\001\002\000\026\007\044\010" +
    "\045\011\046\012\054\013\052\014\047\021\061\022\060" +
    "\023\057\066\063\001\002\000\004\005\117\001\002\000" +
    "\012\005\uffa8\007\uffa8\025\uffa8\034\uffa8\001\002\000\004" +
    "\034\121\001\002\000\004\026\ufff0\001\002\000\016\050" +
    "\127\051\123\054\132\055\131\064\125\065\124\001\002" +
    "\000\004\026\222\001\002\000\004\026\211\001\002\000" +
    "\004\026\200\001\002\000\020\005\uffe6\050\uffe6\051\uffe6" +
    "\054\uffe6\055\uffe6\064\uffe6\065\uffe6\001\002\000\004\060" +
    "\175\001\002\000\020\005\171\050\127\051\123\054\132" +
    "\055\131\064\125\065\124\001\002\000\004\026\152\001" +
    "\002\000\004\026\133\001\002\000\004\026\134\001\002" +
    "\000\004\036\135\001\002\000\004\033\136\001\002\000" +
    "\004\034\137\001\002\000\004\070\140\001\002\000\004" +
    "\033\141\001\002\000\004\023\144\001\002\000\006\007" +
    "\uffda\034\uffda\001\002\000\006\007\145\034\146\001\002" +
    "\000\006\007\uffd8\034\uffd8\001\002\000\004\023\144\001" +
    "\002\000\004\025\147\001\002\000\004\006\150\001\002" +
    "\000\020\005\uffe2\050\uffe2\051\uffe2\054\uffe2\055\uffe2\064" +
    "\uffe2\065\uffe2\001\002\000\006\007\uffd9\034\uffd9\001\002" +
    "\000\004\026\153\001\002\000\004\035\154\001\002\000" +
    "\004\070\155\001\002\000\004\033\156\001\002\000\010" +
    "\021\163\022\162\066\160\001\002\000\006\007\uffdf\034" +
    "\uffdf\001\002\000\006\007\uffdb\034\uffdb\001\002\000\006" +
    "\007\164\034\165\001\002\000\006\007\uffdc\034\uffdc\001" +
    "\002\000\006\007\uffdd\034\uffdd\001\002\000\010\021\163" +
    "\022\162\066\160\001\002\000\004\025\166\001\002\000" +
    "\004\006\167\001\002\000\020\005\uffe1\050\uffe1\051\uffe1" +
    "\054\uffe1\055\uffe1\064\uffe1\065\uffe1\001\002\000\006\007" +
    "\uffde\034\uffde\001\002\000\004\025\173\001\002\000\020" +
    "\005\uffe7\050\uffe7\051\uffe7\054\uffe7\055\uffe7\064\uffe7\065" +
    "\uffe7\001\002\000\004\006\174\001\002\000\024\003\uffe8" +
    "\025\uffe8\027\uffe8\037\uffe8\057\uffe8\060\uffe8\061\uffe8\062" +
    "\uffe8\063\uffe8\001\002\000\004\025\176\001\002\000\004" +
    "\006\177\001\002\000\020\005\uffe0\050\uffe0\051\uffe0\054" +
    "\uffe0\055\uffe0\064\uffe0\065\uffe0\001\002\000\004\026\201" +
    "\001\002\000\004\036\202\001\002\000\004\033\203\001" +
    "\002\000\004\034\204\001\002\000\004\070\205\001\002" +
    "\000\004\023\206\001\002\000\004\025\207\001\002\000" +
    "\004\006\210\001\002\000\020\005\uffe5\050\uffe5\051\uffe5" +
    "\054\uffe5\055\uffe5\064\uffe5\065\uffe5\001\002\000\004\026" +
    "\212\001\002\000\004\036\213\001\002\000\004\033\214" +
    "\001\002\000\004\034\215\001\002\000\004\070\216\001" +
    "\002\000\012\021\050\022\043\023\042\066\055\001\002" +
    "\000\004\025\220\001\002\000\004\006\221\001\002\000" +
    "\020\005\uffe4\050\uffe4\051\uffe4\054\uffe4\055\uffe4\064\uffe4" +
    "\065\uffe4\001\002\000\004\026\223\001\002\000\004\036" +
    "\224\001\002\000\004\033\225\001\002\000\004\034\226" +
    "\001\002\000\004\070\227\001\002\000\004\023\230\001" +
    "\002\000\004\025\231\001\002\000\004\006\232\001\002" +
    "\000\020\005\uffe3\050\uffe3\051\uffe3\054\uffe3\055\uffe3\064" +
    "\uffe3\065\uffe3\001\002\000\020\005\243\050\236\051\234" +
    "\054\237\055\235\064\242\065\241\001\002\000\004\026" +
    "\335\001\002\000\004\026\317\001\002\000\004\061\314" +
    "\001\002\000\004\026\275\001\002\000\020\005\271\050" +
    "\236\051\234\054\237\055\235\064\242\065\241\001\002" +
    "\000\004\026\260\001\002\000\004\026\247\001\002\000" +
    "\004\025\245\001\002\000\020\005\uffcb\050\uffcb\051\uffcb" +
    "\054\uffcb\055\uffcb\064\uffcb\065\uffcb\001\002\000\004\006" +
    "\246\001\002\000\024\003\uffcd\025\uffcd\027\uffcd\037\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\001\002\000" +
    "\004\026\250\001\002\000\004\036\251\001\002\000\004" +
    "\033\252\001\002\000\004\034\253\001\002\000\004\070" +
    "\254\001\002\000\004\023\255\001\002\000\004\025\256" +
    "\001\002\000\004\006\257\001\002\000\020\005\uffc7\050" +
    "\uffc7\051\uffc7\054\uffc7\055\uffc7\064\uffc7\065\uffc7\001\002" +
    "\000\004\026\261\001\002\000\004\036\262\001\002\000" +
    "\004\033\263\001\002\000\004\034\264\001\002\000\004" +
    "\070\265\001\002\000\004\023\266\001\002\000\004\025" +
    "\267\001\002\000\004\006\270\001\002\000\020\005\uffc6" +
    "\050\uffc6\051\uffc6\054\uffc6\055\uffc6\064\uffc6\065\uffc6\001" +
    "\002\000\004\025\273\001\002\000\020\005\uffcc\050\uffcc" +
    "\051\uffcc\054\uffcc\055\uffcc\064\uffcc\065\uffcc\001\002\000" +
    "\004\006\274\001\002\000\024\003\uffe9\025\uffe9\027\uffe9" +
    "\037\uffe9\057\uffe9\060\uffe9\061\uffe9\062\uffe9\063\uffe9\001" +
    "\002\000\004\026\276\001\002\000\004\036\277\001\002" +
    "\000\004\033\300\001\002\000\004\034\301\001\002\000" +
    "\004\070\302\001\002\000\004\033\303\001\002\000\004" +
    "\023\306\001\002\000\006\007\uffc0\034\uffc0\001\002\000" +
    "\006\007\307\034\310\001\002\000\006\007\uffbe\034\uffbe" +
    "\001\002\000\004\023\306\001\002\000\004\025\311\001" +
    "\002\000\004\006\312\001\002\000\020\005\uffc9\050\uffc9" +
    "\051\uffc9\054\uffc9\055\uffc9\064\uffc9\065\uffc9\001\002\000" +
    "\006\007\uffbf\034\uffbf\001\002\000\004\025\315\001\002" +
    "\000\004\006\316\001\002\000\020\005\uffc5\050\uffc5\051" +
    "\uffc5\054\uffc5\055\uffc5\064\uffc5\065\uffc5\001\002\000\004" +
    "\026\320\001\002\000\004\035\321\001\002\000\004\070" +
    "\322\001\002\000\004\033\323\001\002\000\006\021\327" +
    "\022\326\001\002\000\006\007\uffc4\034\uffc4\001\002\000" +
    "\006\007\330\034\331\001\002\000\006\007\uffc1\034\uffc1" +
    "\001\002\000\006\007\uffc2\034\uffc2\001\002\000\006\021" +
    "\327\022\326\001\002\000\004\025\332\001\002\000\004" +
    "\006\333\001\002\000\020\005\uffc8\050\uffc8\051\uffc8\054" +
    "\uffc8\055\uffc8\064\uffc8\065\uffc8\001\002\000\006\007\uffc3" +
    "\034\uffc3\001\002\000\004\026\336\001\002\000\004\036" +
    "\337\001\002\000\004\033\340\001\002\000\004\034\341" +
    "\001\002\000\004\070\342\001\002\000\004\023\343\001" +
    "\002\000\004\025\344\001\002\000\004\006\345\001\002" +
    "\000\020\005\uffca\050\uffca\051\uffca\054\uffca\055\uffca\064" +
    "\uffca\065\uffca\001\002\000\024\003\ufff8\025\ufff8\027\ufff8" +
    "\037\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\001" +
    "\002\000\012\050\354\051\351\052\350\053\352\001\002" +
    "\000\004\026\u010d\001\002\000\004\026\u0104\001\002\000" +
    "\004\026\365\001\002\000\014\005\uffbb\050\uffbb\051\uffbb" +
    "\052\uffbb\053\uffbb\001\002\000\004\057\362\001\002\000" +
    "\014\005\356\050\354\051\351\052\350\053\352\001\002" +
    "\000\004\025\360\001\002\000\014\005\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\001\002\000\004\006\361\001\002" +
    "\000\024\003\uffbd\025\uffbd\027\uffbd\037\uffbd\057\uffbd\060" +
    "\uffbd\061\uffbd\062\uffbd\063\uffbd\001\002\000\004\025\363" +
    "\001\002\000\004\006\364\001\002\000\014\005\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\004\026\366" +
    "\001\002\000\004\036\367\001\002\000\004\033\370\001" +
    "\002\000\004\034\371\001\002\000\004\070\372\001\002" +
    "\000\004\033\373\001\002\000\004\023\375\001\002\000" +
    "\006\007\377\034\u0100\001\002\000\006\007\uffb0\034\uffb0" +
    "\001\002\000\006\007\uffb2\034\uffb2\001\002\000\004\023" +
    "\375\001\002\000\004\025\u0101\001\002\000\004\006\u0102" +
    "\001\002\000\014\005\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\001\002\000\006\007\uffb1\034\uffb1\001\002\000\004" +
    "\026\u0105\001\002\000\004\036\u0106\001\002\000\004\033" +
    "\u0107\001\002\000\004\034\u0108\001\002\000\004\070\u0109" +
    "\001\002\000\004\023\u010a\001\002\000\004\025\u010b\001" +
    "\002\000\004\006\u010c\001\002\000\014\005\uffba\050\uffba" +
    "\051\uffba\052\uffba\053\uffba\001\002\000\004\026\u010e\001" +
    "\002\000\004\035\u010f\001\002\000\004\070\u0110\001\002" +
    "\000\004\033\u0111\001\002\000\006\021\u0114\022\u0113\001" +
    "\002\000\006\007\uffb6\034\uffb6\001\002\000\006\007\uffb3" +
    "\034\uffb3\001\002\000\006\007\uffb4\034\uffb4\001\002\000" +
    "\006\007\u0116\034\u0117\001\002\000\006\021\u0114\022\u0113" +
    "\001\002\000\004\025\u0118\001\002\000\004\006\u0119\001" +
    "\002\000\014\005\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\001\002\000\006\007\uffb5\034\uffb5\001\002\000\024\003" +
    "\ufffe\025\ufffe\027\ufffe\037\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\001\002\000\004\024\u011d\001\002\000" +
    "\004\002\000\001\002\000\004\026\u011f\001\002\000\004" +
    "\047\u0120\001\002\000\004\070\u0121\001\002\000\004\025" +
    "\u0122\001\002\000\004\006\u0123\001\002\000\024\003\uffeb" +
    "\025\uffeb\027\uffeb\037\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\001\002\000\006\035\034\036\032\001\002" +
    "\000\004\026\u0126\001\002\000\004\026\u0127\001\002\000" +
    "\004\032\u0128\001\002\000\004\066\u0129\001\002\000\004" +
    "\030\u012a\001\002\000\004\067\u012b\001\002\000\004\033" +
    "\u012c\001\002\000\026\007\044\010\045\011\046\012\054" +
    "\013\052\014\047\021\061\022\060\023\057\066\063\001" +
    "\002\000\006\007\u012f\034\u0130\001\002\000\006\007\uffae" +
    "\034\uffae\001\002\000\012\021\u0136\022\u0135\023\u0137\066" +
    "\u0133\001\002\000\004\025\u0131\001\002\000\004\006\u0132" +
    "\001\002\000\024\003\uffaf\025\uffaf\027\uffaf\037\uffaf\057" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\001\002\000\006" +
    "\007\uffaa\034\uffaa\001\002\000\006\007\uffad\034\uffad\001" +
    "\002\000\006\007\uffac\034\uffac\001\002\000\006\007\uffa9" +
    "\034\uffa9\001\002\000\006\007\uffab\034\uffab\001\002\000" +
    "\010\050\u013d\051\u013b\052\u013c\001\002\000\012\005\u015b" +
    "\050\u013d\051\u013b\052\u013c\001\002\000\012\005\uffd5\050" +
    "\uffd5\051\uffd5\052\uffd5\001\002\000\004\026\u0151\001\002" +
    "\000\004\026\u0141\001\002\000\004\062\u013e\001\002\000" +
    "\004\025\u013f\001\002\000\004\006\u0140\001\002\000\012" +
    "\005\uffd2\050\uffd2\051\uffd2\052\uffd2\001\002\000\004\026" +
    "\u0142\001\002\000\004\036\u0143\001\002\000\004\033\u0144" +
    "\001\002\000\004\034\u0145\001\002\000\004\070\u0146\001" +
    "\002\000\004\033\u0147\001\002\000\006\021\u014b\022\u014a" +
    "\001\002\000\006\007\uffd1\034\uffd1\001\002\000\006\007" +
    "\u014c\034\u014d\001\002\000\006\007\uffce\034\uffce\001\002" +
    "\000\006\007\uffcf\034\uffcf\001\002\000\006\021\u014b\022" +
    "\u014a\001\002\000\004\025\u014e\001\002\000\004\006\u014f" +
    "\001\002\000\012\005\uffd3\050\uffd3\051\uffd3\052\uffd3\001" +
    "\002\000\006\007\uffd0\034\uffd0\001\002\000\004\026\u0152" +
    "\001\002\000\004\036\u0153\001\002\000\004\033\u0154\001" +
    "\002\000\004\034\u0155\001\002\000\004\070\u0156\001\002" +
    "\000\004\023\u0157\001\002\000\004\025\u0158\001\002\000" +
    "\004\006\u0159\001\002\000\012\005\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\001\002\000\012\005\uffd6\050\uffd6\051\uffd6\052" +
    "\uffd6\001\002\000\004\025\u015c\001\002\000\004\006\u015d" +
    "\001\002\000\024\003\uffd7\025\uffd7\027\uffd7\037\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\062\uffd7\063\uffd7\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015c\000\004\002\003\001\001\000\002\001\001\000" +
    "\030\005\015\007\016\010\012\011\011\013\025\015\017" +
    "\016\006\017\013\032\022\056\023\057\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\015\007\016\010\012\011\011\013\025\016" +
    "\u011a\017\013\032\022\056\023\057\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\050\014\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\061\053\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\061" +
    "\053\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\061\053\072" +
    "\001\001\000\002\001\001\000\006\003\061\053\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\003\061\053\101\001\001\000" +
    "\002\001\001\000\006\003\061\053\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\061\053\106\001" +
    "\001\000\002\001\001\000\006\003\061\053\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\061\053" +
    "\113\001\001\000\002\001\001\000\006\003\061\053\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\037\127\040\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\043\142\044\141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\041\160\042\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\167\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\216\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\045\237\046\243\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\271\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\051\304\052\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\047\324\050\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\333\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\352\030\354\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\356\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\375\027\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0102\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\u0114\025\u0111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\u0119\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\u0124\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\061\022\u012c\053\u012d\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\u0133\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\u0138\034\u0139\001\001\000\004" +
    "\034\u0159\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\035\u0148\036\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\u014f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM recorrido END PROGRAM 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // recorrido ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // recorrido ::= recorrido instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= funcionesgrafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= printarreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= printexpresiones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionesgrafica ::= declaracionhistograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionesgrafica ::= declaracionbarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionesgrafica ::= declaracionpie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionesgrafica ::= declaracionlinea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION tipodato END PUNTOYCOMA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipodedato ::= R_DOUBLE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipodedato ::= R_CHAR CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipodato ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipodato ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipodato ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodato ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printarreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarreglos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // printexpresiones ::= CONSOLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printexpresiones",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionlinea ::= GRAPHLINE PARENTESIS_A instruccionlinea PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracionbarras ::= GRAPHBAR PARENTESIS_A instruccionbarras PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionbarras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccionbarras ::= instruccionbarras contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccionbarras ::= contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contenidobarras ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenidobarras ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL tipodato END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // contenidobarras ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // contenidobarras ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementosejex CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // contenidobarras ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementosejey CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // contenidobarras ::= EXEC GRAPHBAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elementosejey ::= valory 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elementosejey ::= elementosejey COMA valory 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // valory ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // valory ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // valory ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elementosejex ::= datox 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejex",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elementosejex ::= elementosejex COMA datox 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejex",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datox ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datox",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // declaracionhistograma ::= HISTOGRAM PARENTESIS_A instruccionhistograma PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionhistograma",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // instruccionhistograma ::= instruccionhistograma contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // instruccionhistograma ::= contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // contenidohistograma ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // contenidohistograma ::= VALUES DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoshistograma CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenidohistograma ::= EXEC HISTOGRAM END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // elementoshistograma ::= valorhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoshistograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elementoshistograma ::= elementoshistograma COMA valorhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoshistograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valorhistograma ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorhistograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // valorhistograma ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorhistograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracionlinea ::= GRAPHLINE PARENTESIS_A PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccionlinea ::= instruccionlinea contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccionlinea ::= contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidolinea ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidolinea ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoslineac CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenidolinea ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementoslinea CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenidolinea ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // contenidolinea ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // contenidolinea ::= EXEC GRAPHLINE END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elementoslinea ::= valorlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslinea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // elementoslinea ::= elementoslinea COMA valorlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslinea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // valorlinea ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorlinea",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // valorlinea ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorlinea",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // elementoslineac ::= datoslineac 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // elementoslineac ::= elementoslineac COMA datoslineac 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // datoslineac ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoslineac",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaracionpie ::= GRAPHPIE PARENTESIS_A instrucciongrafica PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionpie",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // instrucciongrafica ::= instrucciongrafica contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // instrucciongrafica ::= contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // contenidopie ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // contenidopie ::= VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementospie CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // contenidopie ::= LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoslabel CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // contenidopie ::= EXEC GRAPHPIE END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elementospie ::= valorpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementospie",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elementospie ::= elementospie COMA valorpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementospie",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valorpie ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorpie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valorpie ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorpie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elementoslabel ::= datoslabel 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslabel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elementoslabel ::= elementoslabel COMA datoslabel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslabel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // datoslabel ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoslabel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // arreglos ::= ARR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR MENORQUE GUION CORCHETE_ABRE elementos CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // elementos ::= valorexpresion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // elementos ::= elementos COMA valor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // valor ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valor ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= SUM PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= RES PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= MUL PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= DIV PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= MOD PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // valorexpresion ::= expresion 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // valorexpresion ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valorexpresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valorexpresion ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valorexpresion ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operacionesnest ::= MEDIA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operacionesnest ::= MEDIANA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operacionesnest ::= MODA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operacionesnest ::= VARIANZA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operacionesnest ::= MAX PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operacionesnest ::= MIN PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // arregloexpresiones ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloexpresiones",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
