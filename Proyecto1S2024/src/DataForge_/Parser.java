
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DataForge_;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\004\000\002\002\006\000\002\015" +
    "\003\000\002\015\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\004\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\005\015\000\002\005\015\000\002\057" +
    "\015\000\002\004\003\000\002\004\005\000\002\014\003" +
    "\000\002\014\003\000\002\013\010\000\002\010\010\000" +
    "\002\037\004\000\002\037\003\000\002\040\014\000\002" +
    "\040\014\000\002\040\014\000\002\040\016\000\002\040" +
    "\014\000\002\040\006\000\002\041\003\000\002\041\005" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\005\000\002\044\003\000\002\007\010\000\002" +
    "\033\004\000\002\033\003\000\002\034\014\000\002\034" +
    "\016\000\002\034\006\000\002\035\003\000\002\035\005" +
    "\000\002\036\003\000\002\036\003\000\002\013\007\000" +
    "\002\045\004\000\002\045\003\000\002\046\014\000\002" +
    "\046\016\000\002\046\014\000\002\046\014\000\002\046" +
    "\014\000\002\046\006\000\002\047\003\000\002\047\005" +
    "\000\002\050\003\000\002\050\003\000\002\051\003\000" +
    "\002\051\005\000\002\052\003\000\002\011\010\000\002" +
    "\030\004\000\002\030\003\000\002\012\014\000\002\012" +
    "\014\000\002\012\016\000\002\012\006\000\002\023\003" +
    "\000\002\023\005\000\002\025\003\000\002\025\003\000" +
    "\002\027\003\000\002\027\005\000\002\026\003\000\002" +
    "\017\020\000\002\022\003\000\002\022\005\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\010\000\002\003\010\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\004\024\005\001\002\000\004\002\u0179\001" +
    "\002\000\020\003\023\027\017\037\006\057\024\060\010" +
    "\061\013\062\014\001\002\000\004\026\u0165\001\002\000" +
    "\022\003\ufffa\025\ufffa\027\ufffa\037\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\001\002\000\004\004\u011d\001\002\000" +
    "\022\003\ufff8\025\ufff8\027\ufff8\037\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\001\002\000\022\003\ufff7\025\ufff7\027" +
    "\ufff7\037\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002" +
    "\000\004\004\322\001\002\000\004\004\254\001\002\000" +
    "\022\003\uffff\025\uffff\027\uffff\037\uffff\057\uffff\060\uffff" +
    "\061\uffff\062\uffff\001\002\000\022\003\023\025\252\027" +
    "\017\037\006\057\024\060\010\061\013\062\014\001\002" +
    "\000\004\026\114\001\002\000\022\003\ufff5\025\ufff5\027" +
    "\ufff5\037\ufff5\057\ufff5\060\ufff5\061\ufff5\062\ufff5\001\002" +
    "\000\022\003\ufffd\025\ufffd\027\ufffd\037\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\001\002\000\022\003\ufffb\025\ufffb" +
    "\027\ufffb\037\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb\001" +
    "\002\000\004\006\113\001\002\000\004\004\027\001\002" +
    "\000\022\003\ufff6\025\ufff6\027\ufff6\037\ufff6\057\ufff6\060" +
    "\ufff6\061\ufff6\062\ufff6\001\002\000\022\003\ufffc\025\ufffc" +
    "\027\ufffc\037\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001" +
    "\002\000\012\050\034\051\030\052\031\053\032\001\002" +
    "\000\004\026\102\001\002\000\004\026\064\001\002\000" +
    "\004\026\045\001\002\000\014\005\uffc0\050\uffc0\051\uffc0" +
    "\052\uffc0\053\uffc0\001\002\000\004\056\042\001\002\000" +
    "\014\005\036\050\034\051\030\052\031\053\032\001\002" +
    "\000\004\025\040\001\002\000\014\005\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\001\002\000\004\006\041\001\002" +
    "\000\022\003\uffc2\025\uffc2\027\uffc2\037\uffc2\057\uffc2\060" +
    "\uffc2\061\uffc2\062\uffc2\001\002\000\004\025\043\001\002" +
    "\000\004\006\044\001\002\000\014\005\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\053\uffbc\001\002\000\004\026\046\001\002" +
    "\000\004\036\047\001\002\000\004\033\050\001\002\000" +
    "\004\034\051\001\002\000\004\070\052\001\002\000\004" +
    "\033\053\001\002\000\004\023\055\001\002\000\006\007" +
    "\057\034\060\001\002\000\006\007\uffb5\034\uffb5\001\002" +
    "\000\006\007\uffb7\034\uffb7\001\002\000\004\023\055\001" +
    "\002\000\004\025\061\001\002\000\004\006\062\001\002" +
    "\000\014\005\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\001" +
    "\002\000\006\007\uffb6\034\uffb6\001\002\000\004\026\065" +
    "\001\002\000\004\035\066\001\002\000\004\070\067\001" +
    "\002\000\004\033\070\001\002\000\006\021\073\022\072" +
    "\001\002\000\006\007\uffbb\034\uffbb\001\002\000\006\007" +
    "\uffb8\034\uffb8\001\002\000\006\007\uffb9\034\uffb9\001\002" +
    "\000\006\007\075\034\076\001\002\000\006\021\073\022" +
    "\072\001\002\000\004\025\077\001\002\000\004\006\100" +
    "\001\002\000\014\005\uffbe\050\uffbe\051\uffbe\052\uffbe\053" +
    "\uffbe\001\002\000\006\007\uffba\034\uffba\001\002\000\004" +
    "\026\103\001\002\000\004\036\104\001\002\000\004\033" +
    "\105\001\002\000\004\034\106\001\002\000\004\070\107" +
    "\001\002\000\004\023\110\001\002\000\004\025\111\001" +
    "\002\000\004\006\112\001\002\000\014\005\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\001\002\000\022\003\ufff9\025" +
    "\ufff9\027\ufff9\037\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\001\002\000\006\035\117\036\115\001\002\000\004\033" +
    "\247\001\002\000\004\026\120\001\002\000\004\026\ufff1" +
    "\001\002\000\004\026\121\001\002\000\004\066\122\001" +
    "\002\000\004\030\123\001\002\000\004\067\124\001\002" +
    "\000\046\007\136\010\133\011\127\012\147\013\137\014" +
    "\126\021\144\022\132\023\130\033\134\034\131\040\146" +
    "\041\142\042\150\043\143\044\145\045\141\066\140\001" +
    "\002\000\004\025\245\001\002\000\004\004\240\001\002" +
    "\000\004\004\233\001\002\000\004\025\uffee\001\002\000" +
    "\010\005\uff9e\007\uff9e\025\uff9e\001\002\000\004\025\uffef" +
    "\001\002\000\004\004\226\001\002\000\010\005\uff9f\007" +
    "\uff9f\025\uff9f\001\002\000\004\025\224\001\002\000\010" +
    "\005\uffa2\007\uffa2\025\uffa2\001\002\000\004\004\217\001" +
    "\002\000\004\025\uffa0\001\002\000\004\004\210\001\002" +
    "\000\004\004\203\001\002\000\004\004\176\001\002\000" +
    "\010\005\uffa1\007\uffa1\025\uffa1\001\002\000\004\004\171" +
    "\001\002\000\004\004\164\001\002\000\004\004\157\001" +
    "\002\000\004\004\151\001\002\000\042\007\136\010\133" +
    "\011\127\012\147\013\137\014\126\021\144\033\134\034" +
    "\131\040\146\041\142\042\150\043\143\044\145\045\141" +
    "\066\153\001\002\000\004\007\154\001\002\000\006\005" +
    "\uffa0\007\uffa0\001\002\000\042\007\136\010\133\011\127" +
    "\012\147\013\137\014\126\021\144\033\134\034\131\040" +
    "\146\041\142\042\150\043\143\044\145\045\141\066\153" +
    "\001\002\000\004\005\156\001\002\000\010\005\uffa6\007" +
    "\uffa6\025\uffa6\001\002\000\042\007\136\010\133\011\127" +
    "\012\147\013\137\014\126\021\144\033\134\034\131\040" +
    "\146\041\142\042\150\043\143\044\145\045\141\066\153" +
    "\001\002\000\004\007\161\001\002\000\042\007\136\010" +
    "\133\011\127\012\147\013\137\014\126\021\144\033\134" +
    "\034\131\040\146\041\142\042\150\043\143\044\145\045" +
    "\141\066\153\001\002\000\004\005\163\001\002\000\010" +
    "\005\uffab\007\uffab\025\uffab\001\002\000\042\007\136\010" +
    "\133\011\127\012\147\013\137\014\126\021\144\033\134" +
    "\034\131\040\146\041\142\042\150\043\143\044\145\045" +
    "\141\066\153\001\002\000\004\007\166\001\002\000\042" +
    "\007\136\010\133\011\127\012\147\013\137\014\126\021" +
    "\144\033\134\034\131\040\146\041\142\042\150\043\143" +
    "\044\145\045\141\066\153\001\002\000\004\005\170\001" +
    "\002\000\010\005\uffa8\007\uffa8\025\uffa8\001\002\000\042" +
    "\007\136\010\133\011\127\012\147\013\137\014\126\021" +
    "\144\033\134\034\131\040\146\041\142\042\150\043\143" +
    "\044\145\045\141\066\153\001\002\000\004\007\173\001" +
    "\002\000\042\007\136\010\133\011\127\012\147\013\137" +
    "\014\126\021\144\033\134\034\131\040\146\041\142\042" +
    "\150\043\143\044\145\045\141\066\153\001\002\000\004" +
    "\005\175\001\002\000\010\005\uffa4\007\uffa4\025\uffa4\001" +
    "\002\000\042\007\136\010\133\011\127\012\147\013\137" +
    "\014\126\021\144\033\134\034\131\040\146\041\142\042" +
    "\150\043\143\044\145\045\141\066\153\001\002\000\004" +
    "\007\200\001\002\000\042\007\136\010\133\011\127\012" +
    "\147\013\137\014\126\021\144\033\134\034\131\040\146" +
    "\041\142\042\150\043\143\044\145\045\141\066\153\001" +
    "\002\000\004\005\202\001\002\000\010\005\uffa5\007\uffa5" +
    "\025\uffa5\001\002\000\042\007\136\010\133\011\127\012" +
    "\147\013\137\014\126\021\144\033\134\034\131\040\146" +
    "\041\142\042\150\043\143\044\145\045\141\066\153\001" +
    "\002\000\004\007\205\001\002\000\042\007\136\010\133" +
    "\011\127\012\147\013\137\014\126\021\144\033\134\034" +
    "\131\040\146\041\142\042\150\043\143\044\145\045\141" +
    "\066\153\001\002\000\004\005\207\001\002\000\010\005" +
    "\uffa7\007\uffa7\025\uffa7\001\002\000\042\007\136\010\133" +
    "\011\127\012\147\013\137\014\126\021\144\033\134\034" +
    "\131\040\146\041\142\042\150\043\143\044\145\045\141" +
    "\066\153\001\002\000\004\007\212\001\002\000\042\007" +
    "\136\010\133\011\127\012\147\013\137\014\126\021\144" +
    "\033\134\034\131\040\146\041\142\042\150\043\143\044" +
    "\145\045\141\066\153\001\002\000\004\005\214\001\002" +
    "\000\010\005\uffa3\007\uffa3\025\uffa3\001\002\000\004\006" +
    "\216\001\002\000\022\003\ufff3\025\ufff3\027\ufff3\037\ufff3" +
    "\057\ufff3\060\ufff3\061\ufff3\062\ufff3\001\002\000\042\007" +
    "\136\010\133\011\127\012\147\013\137\014\126\021\144" +
    "\033\134\034\131\040\146\041\142\042\150\043\143\044" +
    "\145\045\141\066\153\001\002\000\004\007\221\001\002" +
    "\000\042\007\136\010\133\011\127\012\147\013\137\014" +
    "\126\021\144\033\134\034\131\040\146\041\142\042\150" +
    "\043\143\044\145\045\141\066\153\001\002\000\004\005" +
    "\223\001\002\000\010\005\uffaa\007\uffaa\025\uffaa\001\002" +
    "\000\004\006\225\001\002\000\022\003\ufff2\025\ufff2\027" +
    "\ufff2\037\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\001\002" +
    "\000\042\007\136\010\133\011\127\012\147\013\137\014" +
    "\126\021\144\033\134\034\131\040\146\041\142\042\150" +
    "\043\143\044\145\045\141\066\153\001\002\000\004\007" +
    "\230\001\002\000\042\007\136\010\133\011\127\012\147" +
    "\013\137\014\126\021\144\033\134\034\131\040\146\041" +
    "\142\042\150\043\143\044\145\045\141\066\153\001\002" +
    "\000\004\005\232\001\002\000\010\005\uffad\007\uffad\025" +
    "\uffad\001\002\000\042\007\136\010\133\011\127\012\147" +
    "\013\137\014\126\021\144\033\134\034\131\040\146\041" +
    "\142\042\150\043\143\044\145\045\141\066\153\001\002" +
    "\000\004\007\235\001\002\000\042\007\136\010\133\011" +
    "\127\012\147\013\137\014\126\021\144\033\134\034\131" +
    "\040\146\041\142\042\150\043\143\044\145\045\141\066" +
    "\153\001\002\000\004\005\237\001\002\000\010\005\uffac" +
    "\007\uffac\025\uffac\001\002\000\042\007\136\010\133\011" +
    "\127\012\147\013\137\014\126\021\144\033\134\034\131" +
    "\040\146\041\142\042\150\043\143\044\145\045\141\066" +
    "\153\001\002\000\004\007\242\001\002\000\042\007\136" +
    "\010\133\011\127\012\147\013\137\014\126\021\144\033" +
    "\134\034\131\040\146\041\142\042\150\043\143\044\145" +
    "\045\141\066\153\001\002\000\004\005\244\001\002\000" +
    "\010\005\uffa9\007\uffa9\025\uffa9\001\002\000\004\006\246" +
    "\001\002\000\022\003\ufff4\025\ufff4\027\ufff4\037\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002\000\004\034\250" +
    "\001\002\000\004\026\ufff0\001\002\000\022\003\ufffe\025" +
    "\ufffe\027\ufffe\037\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe" +
    "\001\002\000\004\024\253\001\002\000\004\002\000\001" +
    "\002\000\010\050\261\051\257\052\260\001\002\000\012" +
    "\005\317\050\261\051\257\052\260\001\002\000\012\005" +
    "\uffda\050\uffda\051\uffda\052\uffda\001\002\000\004\026\305" +
    "\001\002\000\004\026\265\001\002\000\004\062\262\001" +
    "\002\000\004\025\263\001\002\000\004\006\264\001\002" +
    "\000\012\005\uffd7\050\uffd7\051\uffd7\052\uffd7\001\002\000" +
    "\004\026\266\001\002\000\004\036\267\001\002\000\004" +
    "\033\270\001\002\000\004\034\271\001\002\000\004\070" +
    "\272\001\002\000\004\033\273\001\002\000\006\021\277" +
    "\022\276\001\002\000\006\007\uffd6\034\uffd6\001\002\000" +
    "\006\007\300\034\301\001\002\000\006\007\uffd3\034\uffd3" +
    "\001\002\000\006\007\uffd4\034\uffd4\001\002\000\006\021" +
    "\277\022\276\001\002\000\004\025\302\001\002\000\004" +
    "\006\303\001\002\000\012\005\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\001\002\000\006\007\uffd5\034\uffd5\001\002\000\004" +
    "\026\306\001\002\000\004\036\307\001\002\000\004\033" +
    "\310\001\002\000\004\034\311\001\002\000\004\070\312" +
    "\001\002\000\004\023\313\001\002\000\004\025\314\001" +
    "\002\000\004\006\315\001\002\000\012\005\uffd9\050\uffd9" +
    "\051\uffd9\052\uffd9\001\002\000\012\005\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\001\002\000\004\025\320\001\002\000\004" +
    "\006\321\001\002\000\022\003\uffdc\025\uffdc\027\uffdc\037" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\001\002\000\020" +
    "\005\332\050\325\051\323\054\326\055\324\064\331\065" +
    "\330\001\002\000\004\026\u0114\001\002\000\004\026\u0106" +
    "\001\002\000\004\072\u0103\001\002\000\004\026\364\001" +
    "\002\000\020\005\360\050\325\051\323\054\326\055\324" +
    "\064\331\065\330\001\002\000\004\026\347\001\002\000" +
    "\004\026\336\001\002\000\004\025\334\001\002\000\020" +
    "\005\uffd0\050\uffd0\051\uffd0\054\uffd0\055\uffd0\064\uffd0\065" +
    "\uffd0\001\002\000\004\006\335\001\002\000\022\003\uffd2" +
    "\025\uffd2\027\uffd2\037\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\001\002\000\004\026\337\001\002\000\004\036\340" +
    "\001\002\000\004\033\341\001\002\000\004\034\342\001" +
    "\002\000\004\070\343\001\002\000\004\023\344\001\002" +
    "\000\004\025\345\001\002\000\004\006\346\001\002\000" +
    "\020\005\uffcc\050\uffcc\051\uffcc\054\uffcc\055\uffcc\064\uffcc" +
    "\065\uffcc\001\002\000\004\026\350\001\002\000\004\036" +
    "\351\001\002\000\004\033\352\001\002\000\004\034\353" +
    "\001\002\000\004\070\354\001\002\000\004\023\355\001" +
    "\002\000\004\025\356\001\002\000\004\006\357\001\002" +
    "\000\020\005\uffcb\050\uffcb\051\uffcb\054\uffcb\055\uffcb\064" +
    "\uffcb\065\uffcb\001\002\000\004\025\362\001\002\000\020" +
    "\005\uffd1\050\uffd1\051\uffd1\054\uffd1\055\uffd1\064\uffd1\065" +
    "\uffd1\001\002\000\004\006\363\001\002\000\022\003\uffed" +
    "\025\uffed\027\uffed\037\uffed\057\uffed\060\uffed\061\uffed\062" +
    "\uffed\001\002\000\004\026\365\001\002\000\004\036\366" +
    "\001\002\000\004\033\367\001\002\000\004\034\370\001" +
    "\002\000\004\070\371\001\002\000\004\033\372\001\002" +
    "\000\004\023\375\001\002\000\006\007\uffc5\034\uffc5\001" +
    "\002\000\006\007\376\034\377\001\002\000\006\007\uffc3" +
    "\034\uffc3\001\002\000\004\023\375\001\002\000\004\025" +
    "\u0100\001\002\000\004\006\u0101\001\002\000\020\005\uffce" +
    "\050\uffce\051\uffce\054\uffce\055\uffce\064\uffce\065\uffce\001" +
    "\002\000\006\007\uffc4\034\uffc4\001\002\000\004\025\u0104" +
    "\001\002\000\004\006\u0105\001\002\000\020\005\uffca\050" +
    "\uffca\051\uffca\054\uffca\055\uffca\064\uffca\065\uffca\001\002" +
    "\000\004\026\u0107\001\002\000\004\035\u0108\001\002\000" +
    "\004\070\u0109\001\002\000\004\033\u010a\001\002\000\006" +
    "\021\u010e\022\u010d\001\002\000\006\007\uffc9\034\uffc9\001" +
    "\002\000\006\007\u010f\034\u0110\001\002\000\006\007\uffc6" +
    "\034\uffc6\001\002\000\006\007\uffc7\034\uffc7\001\002\000" +
    "\006\021\u010e\022\u010d\001\002\000\004\025\u0111\001\002" +
    "\000\004\006\u0112\001\002\000\020\005\uffcd\050\uffcd\051" +
    "\uffcd\054\uffcd\055\uffcd\064\uffcd\065\uffcd\001\002\000\006" +
    "\007\uffc8\034\uffc8\001\002\000\004\026\u0115\001\002\000" +
    "\004\036\u0116\001\002\000\004\033\u0117\001\002\000\004" +
    "\034\u0118\001\002\000\004\070\u0119\001\002\000\004\023" +
    "\u011a\001\002\000\004\025\u011b\001\002\000\004\006\u011c" +
    "\001\002\000\020\005\uffcf\050\uffcf\051\uffcf\054\uffcf\055" +
    "\uffcf\064\uffcf\065\uffcf\001\002\000\016\050\u0122\051\u011e" +
    "\054\u0125\055\u0124\064\u0120\065\u011f\001\002\000\004\026" +
    "\u015c\001\002\000\004\026\u0153\001\002\000\004\026\u014a" +
    "\001\002\000\020\005\uffea\050\uffea\051\uffea\054\uffea\055" +
    "\uffea\064\uffea\065\uffea\001\002\000\004\071\u0147\001\002" +
    "\000\020\005\u0143\050\u0122\051\u011e\054\u0125\055\u0124\064" +
    "\u0120\065\u011f\001\002\000\004\026\u0135\001\002\000\004" +
    "\026\u0126\001\002\000\004\026\u0127\001\002\000\004\036" +
    "\u0128\001\002\000\004\033\u0129\001\002\000\004\034\u012a" +
    "\001\002\000\004\070\u012b\001\002\000\004\033\u012c\001" +
    "\002\000\004\023\u012f\001\002\000\006\007\uffdf\034\uffdf" +
    "\001\002\000\006\007\u0130\034\u0131\001\002\000\006\007" +
    "\uffdd\034\uffdd\001\002\000\004\023\u012f\001\002\000\004" +
    "\025\u0132\001\002\000\004\006\u0133\001\002\000\020\005" +
    "\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\064\uffe6\065\uffe6" +
    "\001\002\000\006\007\uffde\034\uffde\001\002\000\004\026" +
    "\u0136\001\002\000\004\035\u0137\001\002\000\004\070\u0138" +
    "\001\002\000\004\033\u0139\001\002\000\006\021\u013d\022" +
    "\u013c\001\002\000\006\007\uffe3\034\uffe3\001\002\000\006" +
    "\007\u013e\034\u013f\001\002\000\006\007\uffe0\034\uffe0\001" +
    "\002\000\006\007\uffe1\034\uffe1\001\002\000\006\021\u013d" +
    "\022\u013c\001\002\000\004\025\u0140\001\002\000\004\006" +
    "\u0141\001\002\000\020\005\uffe5\050\uffe5\051\uffe5\054\uffe5" +
    "\055\uffe5\064\uffe5\065\uffe5\001\002\000\006\007\uffe2\034" +
    "\uffe2\001\002\000\004\025\u0145\001\002\000\020\005\uffeb" +
    "\050\uffeb\051\uffeb\054\uffeb\055\uffeb\064\uffeb\065\uffeb\001" +
    "\002\000\004\006\u0146\001\002\000\022\003\uffec\025\uffec" +
    "\027\uffec\037\uffec\057\uffec\060\uffec\061\uffec\062\uffec\001" +
    "\002\000\004\025\u0148\001\002\000\004\006\u0149\001\002" +
    "\000\020\005\uffe4\050\uffe4\051\uffe4\054\uffe4\055\uffe4\064" +
    "\uffe4\065\uffe4\001\002\000\004\026\u014b\001\002\000\004" +
    "\036\u014c\001\002\000\004\033\u014d\001\002\000\004\034" +
    "\u014e\001\002\000\004\070\u014f\001\002\000\004\023\u0150" +
    "\001\002\000\004\025\u0151\001\002\000\004\006\u0152\001" +
    "\002\000\020\005\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9" +
    "\064\uffe9\065\uffe9\001\002\000\004\026\u0154\001\002\000" +
    "\004\036\u0155\001\002\000\004\033\u0156\001\002\000\004" +
    "\034\u0157\001\002\000\004\070\u0158\001\002\000\004\023" +
    "\u0159\001\002\000\004\025\u015a\001\002\000\004\006\u015b" +
    "\001\002\000\020\005\uffe8\050\uffe8\051\uffe8\054\uffe8\055" +
    "\uffe8\064\uffe8\065\uffe8\001\002\000\004\026\u015d\001\002" +
    "\000\004\036\u015e\001\002\000\004\033\u015f\001\002\000" +
    "\004\034\u0160\001\002\000\004\070\u0161\001\002\000\004" +
    "\023\u0162\001\002\000\004\025\u0163\001\002\000\004\006" +
    "\u0164\001\002\000\020\005\uffe7\050\uffe7\051\uffe7\054\uffe7" +
    "\055\uffe7\064\uffe7\065\uffe7\001\002\000\006\035\117\036" +
    "\115\001\002\000\004\026\u0167\001\002\000\004\026\u0168" +
    "\001\002\000\004\032\u0169\001\002\000\004\066\u016a\001" +
    "\002\000\004\030\u016b\001\002\000\004\067\u016c\001\002" +
    "\000\004\033\u016d\001\002\000\012\021\u0172\022\u0171\023" +
    "\u0173\066\u016f\001\002\000\006\007\uffb3\034\uffb3\001\002" +
    "\000\006\007\uffaf\034\uffaf\001\002\000\006\007\u0174\034" +
    "\u0175\001\002\000\006\007\uffb1\034\uffb1\001\002\000\006" +
    "\007\uffae\034\uffae\001\002\000\006\007\uffb0\034\uffb0\001" +
    "\002\000\012\021\u0172\022\u0171\023\u0173\066\u016f\001\002" +
    "\000\004\025\u0176\001\002\000\004\006\u0177\001\002\000" +
    "\022\003\uffb4\025\uffb4\027\uffb4\037\uffb4\057\uffb4\060\uffb4" +
    "\061\uffb4\062\uffb4\001\002\000\006\007\uffb2\034\uffb2\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0177\000\004\002\003\001\001\000\002\001\001\000" +
    "\026\005\020\007\010\010\011\011\024\013\017\015\015" +
    "\016\014\017\021\032\006\057\025\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\005\020\007\010\010\011\011\024" +
    "\013\017\016\250\017\021\032\006\057\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\032\030\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\055\027\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\073\025\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\003\134" +
    "\014\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\157\001" +
    "\001\000\002\001\001\000\004\003\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\164\001\001\000" +
    "\002\001\001\000\004\003\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\171\001\001\000\002\001" +
    "\001\000\004\003\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\176\001\001\000\002\001\001\000" +
    "\004\003\200\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\003\203\001\001\000\002\001\001\000\004\003" +
    "\205\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\210\001\001\000\002\001\001\000\004\003\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\217\001\001\000\002\001" +
    "\001\000\004\003\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\226\001\001\000\002\001\001\000\004\003\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\233\001" +
    "\001\000\002\001\001\000\004\003\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\003\240\001\001\000" +
    "\002\001\001\000\004\003\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\254\034\255\001" +
    "\001\000\004\034\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\274\036\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\303\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\326\046\332\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\051\373\052\372\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\u0101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\047\u010b\050\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\037\u0122\040\u0120" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\043\u012d\044" +
    "\u012c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\u0133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u013a\042\u0139\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\u0141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\u016f" +
    "\024\u016d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\u0177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM recorrido END PROGRAM 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // recorrido ::= instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // recorrido ::= recorrido instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= declaraciong 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= arreglos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= funcionesgrafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcionesgrafica ::= declaracionhistograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionesgrafica ::= declaracionbarras 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionesgrafica ::= declaracionpie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionesgrafica ::= declaracionlinea 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION tipodato END PUNTOYCOMA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION IDENTIFICADOR END PUNTOYCOMA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaraciong ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaraciong",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipodedato ::= R_DOUBLE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipodedato ::= R_CHAR CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipodato ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipodato ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionlinea ::= GRAPHLINE PARENTESIS_A instruccionlinea PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionbarras ::= GRAPHBAR PARENTESIS_A instruccionbarras PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionbarras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccionbarras ::= instruccionbarras contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccionbarras ::= contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // contenidobarras ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // contenidobarras ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // contenidobarras ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // contenidobarras ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementosejex CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // contenidobarras ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementosejey CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // contenidobarras ::= EXEC GRAPBAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // elementosejey ::= valory 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // elementosejey ::= elementosejey COMA valory 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // valory ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // valory ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // elementosejex ::= datox 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejex",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // elementosejex ::= elementosejex COMA datox 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejex",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // datox ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datox",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declaracionhistograma ::= HISTOGRAM PARENTESIS_A instruccionhistograma PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionhistograma",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instruccionhistograma ::= instruccionhistograma contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instruccionhistograma ::= contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenidohistograma ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenidohistograma ::= VALUES DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoshistograma CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenidohistograma ::= EXEC HISTOGRAM END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // elementoshistograma ::= valorhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoshistograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elementoshistograma ::= elementoshistograma COMA valorhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoshistograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valorhistograma ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorhistograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valorhistograma ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorhistograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionlinea ::= GRAPHLINE PARENTESIS_A PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instruccionlinea ::= instruccionlinea contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instruccionlinea ::= contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // contenidolinea ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // contenidolinea ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoslineac CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // contenidolinea ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementoslinea CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidolinea ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidolinea ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidolinea ::= EXEC GRAPLINE END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elementoslinea ::= valorlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslinea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elementoslinea ::= elementoslinea COMA valorlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslinea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valorlinea ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorlinea",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valorlinea ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorlinea",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // elementoslineac ::= datoslineac 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // elementoslineac ::= elementoslineac COMA datoslineac 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // datoslineac ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoslineac",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declaracionpie ::= GRAPHPIE PARENTESIS_A instrucciongrafica PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionpie",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instrucciongrafica ::= instrucciongrafica contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // instrucciongrafica ::= contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenidopie ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenidopie ::= VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementospie CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contenidopie ::= LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoslabel CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contenidopie ::= EXEC GRAPPIE END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // elementospie ::= valorpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementospie",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elementospie ::= elementospie COMA valorpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementospie",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // valorpie ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorpie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valorpie ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorpie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // elementoslabel ::= datoslabel 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslabel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elementoslabel ::= elementoslabel COMA datoslabel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslabel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // datoslabel ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoslabel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arreglos ::= ARR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR MENORQUE GUION CORCHETE_ABRE elementos CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // elementos ::= valor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elementos ::= elementos COMA valor 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valor ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valor ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= SUM PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresion ::= RES PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresion ::= MUL PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresion ::= DIV PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expresion ::= MOD PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expresion ::= MEDIA PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expresion ::= MEDIANA PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expresion ::= MODA PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expresion ::= VARIANZA PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion ::= MAX PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion ::= MIN PARENTESIS_A expresion COMA expresion PARENTESIS_C 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expresion ::= COMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expresion ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expresion ::= CORCHETE_ABRE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expresion ::= CORCHETE_CIERRA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
