
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DataForge_;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\006\000\002\015" +
    "\003\000\002\015\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\004\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\005\015\000\002\005" +
    "\015\000\002\004\003\000\002\004\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\056\015\000\002\056\015\000\002\060\004\000\002" +
    "\060\005\000\002\057\012\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\062\003\000\002\062\005\000\002\013\010\000" +
    "\002\010\010\000\002\037\004\000\002\037\003\000\002" +
    "\040\014\000\002\040\014\000\002\040\014\000\002\040" +
    "\016\000\002\040\014\000\002\040\006\000\002\041\003" +
    "\000\002\041\005\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\007\010\000\002\033\004\000\002\033" +
    "\003\000\002\034\014\000\002\034\014\000\002\034\006" +
    "\000\002\035\003\000\002\035\005\000\002\036\003\000" +
    "\002\036\003\000\002\013\007\000\002\045\004\000\002" +
    "\045\003\000\002\046\014\000\002\046\014\000\002\046" +
    "\012\000\002\046\014\000\002\046\014\000\002\046\006" +
    "\000\002\047\003\000\002\047\005\000\002\050\003\000" +
    "\002\050\003\000\002\051\003\000\002\051\005\000\002" +
    "\051\003\000\002\052\003\000\002\011\010\000\002\030" +
    "\004\000\002\030\003\000\002\012\014\000\002\012\014" +
    "\000\002\012\016\000\002\012\006\000\002\023\003\000" +
    "\002\023\005\000\002\025\003\000\002\025\003\000\002" +
    "\027\003\000\002\027\005\000\002\026\003\000\002\017" +
    "\020\000\002\017\017\000\002\022\003\000\002\022\005" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\003\010\000\002\003\010\000\002" +
    "\003\010\000\002\003\010\000\002\003\010\000\002\003" +
    "\003\000\002\053\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\054\006\000" +
    "\002\054\006\000\002\054\006\000\002\054\006\000\002" +
    "\054\006\000\002\054\006\000\002\055\004\000\002\055" +
    "\005\000\002\063\003\000\002\063\003\000\002\063\003" +
    "\000\002\063\004\000\002\063\003\000\002\063\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\004\023\005\001\002\000\004\002\u018c\001" +
    "\002\000\022\003\022\026\030\036\011\056\021\057\027" +
    "\060\025\061\007\062\015\001\002\000\024\003\uffff\024" +
    "\uffff\026\uffff\036\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\001\002\000\004\004\u016d\001\002\000\024\003" +
    "\ufff9\024\ufff9\026\ufff9\036\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\001\002\000\004\025\u015c\001\002\000" +
    "\024\003\ufff5\024\ufff5\026\ufff5\036\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\001\002\000\024\003\ufff6\024" +
    "\ufff6\026\ufff6\036\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\001\002\000\024\003\ufffc\024\ufffc\026\ufffc\036" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\004\025\u013a\001\002\000\024\003\ufffd\024\ufffd\026" +
    "\ufffd\036\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\001\002\000\024\003\ufff7\024\ufff7\026\ufff7\036\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000\024" +
    "\003\022\024\u0138\026\030\036\011\056\021\057\027\060" +
    "\025\061\007\062\015\001\002\000\004\004\u0103\001\002" +
    "\000\004\006\u0102\001\002\000\024\003\ufffb\024\ufffb\026" +
    "\ufffb\036\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\001\002\000\024\003\ufffa\024\ufffa\026\ufffa\036\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\004" +
    "\004\273\001\002\000\024\003\ufff4\024\ufff4\026\ufff4\036" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002" +
    "\000\004\004\162\001\002\000\004\025\031\001\002\000" +
    "\006\034\034\035\032\001\002\000\004\032\160\001\002" +
    "\000\004\025\035\001\002\000\004\025\ufff1\001\002\000" +
    "\004\025\036\001\002\000\004\065\037\001\002\000\004" +
    "\027\040\001\002\000\004\066\041\001\002\000\040\010" +
    "\047\011\044\012\062\013\052\014\043\020\057\021\046" +
    "\022\045\037\061\040\055\041\063\042\056\043\060\044" +
    "\054\065\053\001\002\000\004\024\156\001\002\000\004" +
    "\004\151\001\002\000\004\004\144\001\002\000\004\024" +
    "\uffee\001\002\000\004\024\uffef\001\002\000\004\004\137" +
    "\001\002\000\004\024\135\001\002\000\012\005\uff97\007" +
    "\uff97\024\uff97\033\uff97\001\002\000\004\004\130\001\002" +
    "\000\004\024\uffec\001\002\000\004\004\125\001\002\000" +
    "\004\004\122\001\002\000\004\004\117\001\002\000\004" +
    "\024\uffed\001\002\000\004\004\114\001\002\000\004\004" +
    "\111\001\002\000\004\004\104\001\002\000\004\004\064" +
    "\001\002\000\006\031\067\032\065\001\002\000\040\010" +
    "\047\011\044\012\062\013\052\014\043\020\100\021\075" +
    "\022\073\037\061\040\055\041\063\042\056\043\060\044" +
    "\054\065\077\001\002\000\004\005\071\001\002\000\004" +
    "\065\070\001\002\000\004\005\uff8b\001\002\000\012\005" +
    "\uff8f\007\uff8f\024\uff8f\033\uff8f\001\002\000\004\033\103" +
    "\001\002\000\010\005\uff92\007\uff92\033\uff92\001\002\000" +
    "\006\007\101\033\uffa2\001\002\000\010\005\uff95\007\uff95" +
    "\033\uff95\001\002\000\010\005\uff96\007\uff96\033\uff96\001" +
    "\002\000\010\005\uff94\007\uff94\033\uff94\001\002\000\010" +
    "\005\uff93\007\uff93\033\uff93\001\002\000\040\010\047\011" +
    "\044\012\062\013\052\014\043\020\100\021\075\022\073" +
    "\037\061\040\055\041\063\042\056\043\060\044\054\065" +
    "\077\001\002\000\004\033\uffa1\001\002\000\004\005\uff8a" +
    "\001\002\000\040\010\047\011\044\012\062\013\052\014" +
    "\043\020\100\021\075\022\073\037\061\040\055\041\063" +
    "\042\056\043\060\044\054\065\077\001\002\000\004\007" +
    "\106\001\002\000\040\010\047\011\044\012\062\013\052" +
    "\014\043\020\100\021\075\022\073\037\061\040\055\041" +
    "\063\042\056\043\060\044\054\065\077\001\002\000\004" +
    "\005\110\001\002\000\012\005\uff9a\007\uff9a\024\uff9a\033" +
    "\uff9a\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\113\001\002\000\012\005\uff91\007\uff91\024\uff91\033" +
    "\uff91\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\116\001\002\000\012\005\uff8d\007\uff8d\024\uff8d\033" +
    "\uff8d\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\121\001\002\000\012\005\uff8e\007\uff8e\024\uff8e\033" +
    "\uff8e\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\124\001\002\000\012\005\uff90\007\uff90\024\uff90\033" +
    "\uff90\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\127\001\002\000\012\005\uff8c\007\uff8c\024\uff8c\033" +
    "\uff8c\001\002\000\040\010\047\011\044\012\062\013\052" +
    "\014\043\020\100\021\075\022\073\037\061\040\055\041" +
    "\063\042\056\043\060\044\054\065\077\001\002\000\004" +
    "\007\132\001\002\000\040\010\047\011\044\012\062\013" +
    "\052\014\043\020\100\021\075\022\073\037\061\040\055" +
    "\041\063\042\056\043\060\044\054\065\077\001\002\000" +
    "\004\005\134\001\002\000\012\005\uff99\007\uff99\024\uff99" +
    "\033\uff99\001\002\000\004\006\136\001\002\000\024\003" +
    "\ufff2\024\ufff2\026\ufff2\036\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\001\002\000\040\010\047\011\044\012" +
    "\062\013\052\014\043\020\100\021\075\022\073\037\061" +
    "\040\055\041\063\042\056\043\060\044\054\065\077\001" +
    "\002\000\004\007\141\001\002\000\040\010\047\011\044" +
    "\012\062\013\052\014\043\020\100\021\075\022\073\037" +
    "\061\040\055\041\063\042\056\043\060\044\054\065\077" +
    "\001\002\000\004\005\143\001\002\000\012\005\uff9c\007" +
    "\uff9c\024\uff9c\033\uff9c\001\002\000\040\010\047\011\044" +
    "\012\062\013\052\014\043\020\100\021\075\022\073\037" +
    "\061\040\055\041\063\042\056\043\060\044\054\065\077" +
    "\001\002\000\004\007\146\001\002\000\040\010\047\011" +
    "\044\012\062\013\052\014\043\020\100\021\075\022\073" +
    "\037\061\040\055\041\063\042\056\043\060\044\054\065" +
    "\077\001\002\000\004\005\150\001\002\000\012\005\uff9b" +
    "\007\uff9b\024\uff9b\033\uff9b\001\002\000\040\010\047\011" +
    "\044\012\062\013\052\014\043\020\100\021\075\022\073" +
    "\037\061\040\055\041\063\042\056\043\060\044\054\065" +
    "\077\001\002\000\004\007\153\001\002\000\040\010\047" +
    "\011\044\012\062\013\052\014\043\020\100\021\075\022" +
    "\073\037\061\040\055\041\063\042\056\043\060\044\054" +
    "\065\077\001\002\000\004\005\155\001\002\000\012\005" +
    "\uff98\007\uff98\024\uff98\033\uff98\001\002\000\004\006\157" +
    "\001\002\000\024\003\ufff3\024\ufff3\026\ufff3\036\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\001\002\000\004" +
    "\033\161\001\002\000\004\025\ufff0\001\002\000\016\047" +
    "\170\050\163\053\172\054\171\063\165\064\164\001\002" +
    "\000\004\025\262\001\002\000\004\025\251\001\002\000" +
    "\004\025\240\001\002\000\020\005\234\047\170\050\163" +
    "\053\172\054\171\063\165\064\164\001\002\000\020\005" +
    "\uffdc\047\uffdc\050\uffdc\053\uffdc\054\uffdc\063\uffdc\064\uffdc" +
    "\001\002\000\004\057\231\001\002\000\004\025\212\001" +
    "\002\000\004\025\173\001\002\000\004\025\174\001\002" +
    "\000\004\035\175\001\002\000\004\032\176\001\002\000" +
    "\004\033\177\001\002\000\004\067\200\001\002\000\004" +
    "\032\201\001\002\000\004\022\204\001\002\000\006\007" +
    "\uffd0\033\uffd0\001\002\000\006\007\205\033\206\001\002" +
    "\000\006\007\uffce\033\uffce\001\002\000\004\022\204\001" +
    "\002\000\004\024\207\001\002\000\004\006\210\001\002" +
    "\000\020\005\uffd8\047\uffd8\050\uffd8\053\uffd8\054\uffd8\063" +
    "\uffd8\064\uffd8\001\002\000\006\007\uffcf\033\uffcf\001\002" +
    "\000\004\025\213\001\002\000\004\034\214\001\002\000" +
    "\004\067\215\001\002\000\004\032\216\001\002\000\010" +
    "\020\223\021\222\065\220\001\002\000\006\007\uffd5\033" +
    "\uffd5\001\002\000\006\007\uffd1\033\uffd1\001\002\000\006" +
    "\007\224\033\225\001\002\000\006\007\uffd2\033\uffd2\001" +
    "\002\000\006\007\uffd3\033\uffd3\001\002\000\010\020\223" +
    "\021\222\065\220\001\002\000\004\024\226\001\002\000" +
    "\004\006\227\001\002\000\020\005\uffd7\047\uffd7\050\uffd7" +
    "\053\uffd7\054\uffd7\063\uffd7\064\uffd7\001\002\000\006\007" +
    "\uffd4\033\uffd4\001\002\000\004\024\232\001\002\000\004" +
    "\006\233\001\002\000\020\005\uffd6\047\uffd6\050\uffd6\053" +
    "\uffd6\054\uffd6\063\uffd6\064\uffd6\001\002\000\004\024\236" +
    "\001\002\000\020\005\uffdd\047\uffdd\050\uffdd\053\uffdd\054" +
    "\uffdd\063\uffdd\064\uffdd\001\002\000\004\006\237\001\002" +
    "\000\024\003\uffde\024\uffde\026\uffde\036\uffde\056\uffde\057" +
    "\uffde\060\uffde\061\uffde\062\uffde\001\002\000\004\025\241" +
    "\001\002\000\004\035\242\001\002\000\004\032\243\001" +
    "\002\000\004\033\244\001\002\000\004\067\245\001\002" +
    "\000\004\022\246\001\002\000\004\024\247\001\002\000" +
    "\004\006\250\001\002\000\020\005\uffdb\047\uffdb\050\uffdb" +
    "\053\uffdb\054\uffdb\063\uffdb\064\uffdb\001\002\000\004\025" +
    "\252\001\002\000\004\035\253\001\002\000\004\032\254" +
    "\001\002\000\004\033\255\001\002\000\004\067\256\001" +
    "\002\000\012\020\057\021\046\022\045\065\053\001\002" +
    "\000\004\024\260\001\002\000\004\006\261\001\002\000" +
    "\020\005\uffda\047\uffda\050\uffda\053\uffda\054\uffda\063\uffda" +
    "\064\uffda\001\002\000\004\025\263\001\002\000\004\035" +
    "\264\001\002\000\004\032\265\001\002\000\004\033\266" +
    "\001\002\000\004\067\267\001\002\000\004\022\270\001" +
    "\002\000\004\024\271\001\002\000\004\006\272\001\002" +
    "\000\020\005\uffd9\047\uffd9\050\uffd9\053\uffd9\054\uffd9\063" +
    "\uffd9\064\uffd9\001\002\000\020\005\303\047\276\050\274" +
    "\053\277\054\275\063\302\064\301\001\002\000\004\025" +
    "\371\001\002\000\004\025\362\001\002\000\004\060\357" +
    "\001\002\000\004\025\346\001\002\000\020\005\342\047" +
    "\276\050\274\053\277\054\275\063\302\064\301\001\002" +
    "\000\004\025\331\001\002\000\004\025\307\001\002\000" +
    "\004\024\305\001\002\000\020\005\uffc1\047\uffc1\050\uffc1" +
    "\053\uffc1\054\uffc1\063\uffc1\064\uffc1\001\002\000\004\006" +
    "\306\001\002\000\024\003\uffc3\024\uffc3\026\uffc3\036\uffc3" +
    "\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062\uffc3\001\002\000" +
    "\004\025\310\001\002\000\004\035\311\001\002\000\004" +
    "\032\312\001\002\000\004\033\313\001\002\000\004\067" +
    "\314\001\002\000\016\020\323\021\320\022\322\031\317" +
    "\032\316\065\315\001\002\000\004\024\uff85\001\002\000" +
    "\040\010\047\011\044\012\062\013\052\014\043\020\100" +
    "\021\075\022\073\037\061\040\055\041\063\042\056\043" +
    "\060\044\054\065\077\001\002\000\004\065\326\001\002" +
    "\000\004\024\uff88\001\002\000\004\024\324\001\002\000" +
    "\004\024\uff87\001\002\000\004\024\uff89\001\002\000\004" +
    "\006\325\001\002\000\020\005\uffbd\047\uffbd\050\uffbd\053" +
    "\uffbd\054\uffbd\063\uffbd\064\uffbd\001\002\000\004\024\uff86" +
    "\001\002\000\004\033\330\001\002\000\004\024\uff84\001" +
    "\002\000\004\025\332\001\002\000\004\035\333\001\002" +
    "\000\004\032\334\001\002\000\004\033\335\001\002\000" +
    "\004\067\336\001\002\000\016\020\323\021\320\022\322" +
    "\031\317\032\316\065\315\001\002\000\004\024\340\001" +
    "\002\000\004\006\341\001\002\000\020\005\uffbc\047\uffbc" +
    "\050\uffbc\053\uffbc\054\uffbc\063\uffbc\064\uffbc\001\002\000" +
    "\004\024\344\001\002\000\020\005\uffc2\047\uffc2\050\uffc2" +
    "\053\uffc2\054\uffc2\063\uffc2\064\uffc2\001\002\000\004\006" +
    "\345\001\002\000\024\003\uffdf\024\uffdf\026\uffdf\036\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000" +
    "\004\025\347\001\002\000\004\035\350\001\002\000\004" +
    "\032\351\001\002\000\004\033\352\001\002\000\004\067" +
    "\353\001\002\000\016\020\323\021\320\022\322\031\317" +
    "\032\316\065\315\001\002\000\004\024\355\001\002\000" +
    "\004\006\356\001\002\000\020\005\uffbf\047\uffbf\050\uffbf" +
    "\053\uffbf\054\uffbf\063\uffbf\064\uffbf\001\002\000\004\024" +
    "\360\001\002\000\004\006\361\001\002\000\020\005\uffbb" +
    "\047\uffbb\050\uffbb\053\uffbb\054\uffbb\063\uffbb\064\uffbb\001" +
    "\002\000\004\025\363\001\002\000\004\034\364\001\002" +
    "\000\004\067\365\001\002\000\016\020\323\021\320\022" +
    "\322\031\317\032\316\065\315\001\002\000\004\024\367" +
    "\001\002\000\004\006\370\001\002\000\020\005\uffbe\047" +
    "\uffbe\050\uffbe\053\uffbe\054\uffbe\063\uffbe\064\uffbe\001\002" +
    "\000\004\025\372\001\002\000\004\035\373\001\002\000" +
    "\004\032\374\001\002\000\004\033\375\001\002\000\004" +
    "\067\376\001\002\000\016\020\323\021\320\022\322\031" +
    "\317\032\316\065\315\001\002\000\004\024\u0100\001\002" +
    "\000\004\006\u0101\001\002\000\020\005\uffc0\047\uffc0\050" +
    "\uffc0\053\uffc0\054\uffc0\063\uffc0\064\uffc0\001\002\000\024" +
    "\003\ufff8\024\ufff8\026\ufff8\036\ufff8\056\ufff8\057\ufff8\060" +
    "\ufff8\061\ufff8\062\ufff8\001\002\000\012\047\u0108\050\u0105" +
    "\051\u0104\052\u0106\001\002\000\004\025\u0129\001\002\000" +
    "\004\025\u0120\001\002\000\004\025\u0111\001\002\000\014" +
    "\005\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\001\002\000" +
    "\004\056\u010e\001\002\000\014\005\u010a\047\u0108\050\u0105" +
    "\051\u0104\052\u0106\001\002\000\004\024\u010c\001\002\000" +
    "\014\005\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\001\002" +
    "\000\004\006\u010d\001\002\000\024\003\uffb2\024\uffb2\026" +
    "\uffb2\036\uffb2\056\uffb2\057\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\001\002\000\004\024\u010f\001\002\000\004\006\u0110\001" +
    "\002\000\014\005\uffac\047\uffac\050\uffac\051\uffac\052\uffac" +
    "\001\002\000\004\025\u0112\001\002\000\004\035\u0113\001" +
    "\002\000\004\032\u0114\001\002\000\004\033\u0115\001\002" +
    "\000\004\067\u0116\001\002\000\004\032\u0117\001\002\000" +
    "\004\022\u0119\001\002\000\006\007\u011b\033\u011c\001\002" +
    "\000\006\007\uffa5\033\uffa5\001\002\000\006\007\uffa7\033" +
    "\uffa7\001\002\000\004\022\u0119\001\002\000\004\024\u011d" +
    "\001\002\000\004\006\u011e\001\002\000\014\005\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\001\002\000\006\007\uffa6" +
    "\033\uffa6\001\002\000\004\025\u0121\001\002\000\004\035" +
    "\u0122\001\002\000\004\032\u0123\001\002\000\004\033\u0124" +
    "\001\002\000\004\067\u0125\001\002\000\004\022\u0126\001" +
    "\002\000\004\024\u0127\001\002\000\004\006\u0128\001\002" +
    "\000\014\005\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\001" +
    "\002\000\004\025\u012a\001\002\000\004\034\u012b\001\002" +
    "\000\004\067\u012c\001\002\000\004\032\u012d\001\002\000" +
    "\006\020\u0130\021\u012f\001\002\000\006\007\uffab\033\uffab" +
    "\001\002\000\006\007\uffa8\033\uffa8\001\002\000\006\007" +
    "\uffa9\033\uffa9\001\002\000\006\007\u0132\033\u0133\001\002" +
    "\000\006\020\u0130\021\u012f\001\002\000\004\024\u0134\001" +
    "\002\000\004\006\u0135\001\002\000\014\005\uffae\047\uffae" +
    "\050\uffae\051\uffae\052\uffae\001\002\000\006\007\uffaa\033" +
    "\uffaa\001\002\000\024\003\ufffe\024\ufffe\026\ufffe\036\ufffe" +
    "\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001\002\000" +
    "\004\023\u0139\001\002\000\004\002\000\001\002\000\004" +
    "\025\u013b\001\002\000\006\045\u013d\046\u013c\001\002\000" +
    "\004\067\u014a\001\002\000\004\067\u013e\001\002\000\040" +
    "\010\047\011\044\012\062\013\052\014\043\020\u0144\021" +
    "\u0140\022\u013f\037\061\040\055\041\063\042\056\043\060" +
    "\044\054\065\u0143\001\002\000\006\007\uffe5\024\uffe5\001" +
    "\002\000\006\007\uffe3\024\uffe3\001\002\000\006\007\uffe2" +
    "\024\uffe2\001\002\000\006\007\u0148\024\uffe1\001\002\000" +
    "\006\007\uffe6\024\uffe6\001\002\000\006\007\uffe4\024\uffe4" +
    "\001\002\000\004\024\u0146\001\002\000\004\006\u0147\001" +
    "\002\000\024\003\uffe7\024\uffe7\026\uffe7\036\uffe7\056\uffe7" +
    "\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002\000\040\010" +
    "\047\011\044\012\062\013\052\014\043\020\u0144\021\u0140" +
    "\022\u013f\037\061\040\055\041\063\042\056\043\060\044" +
    "\054\065\u0143\001\002\000\004\024\uffe0\001\002\000\006" +
    "\022\u014c\065\u014b\001\002\000\004\066\u0157\001\002\000" +
    "\004\066\u014d\001\002\000\004\030\u014e\001\002\000\006" +
    "\031\u0151\032\u0150\001\002\000\004\024\u0155\001\002\000" +
    "\040\010\047\011\044\012\062\013\052\014\043\020\100" +
    "\021\075\022\073\037\061\040\055\041\063\042\056\043" +
    "\060\044\054\065\077\001\002\000\004\065\u0152\001\002" +
    "\000\004\024\uffe9\001\002\000\004\033\u0154\001\002\000" +
    "\004\024\uffe8\001\002\000\004\006\u0156\001\002\000\024" +
    "\003\uffea\024\uffea\026\uffea\036\uffea\056\uffea\057\uffea\060" +
    "\uffea\061\uffea\062\uffea\001\002\000\004\030\u0158\001\002" +
    "\000\006\031\u0151\032\u0150\001\002\000\004\024\u015a\001" +
    "\002\000\004\006\u015b\001\002\000\024\003\uffeb\024\uffeb" +
    "\026\uffeb\036\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\001\002\000\006\034\034\035\032\001\002\000\004" +
    "\025\u015e\001\002\000\004\025\u015f\001\002\000\004\031" +
    "\u0160\001\002\000\004\065\u0161\001\002\000\004\027\u0162" +
    "\001\002\000\004\066\u0163\001\002\000\006\031\u0165\032" +
    "\u0164\001\002\000\040\010\047\011\044\012\062\013\052" +
    "\014\043\020\100\021\075\022\073\037\061\040\055\041" +
    "\063\042\056\043\060\044\054\065\077\001\002\000\004" +
    "\065\u0166\001\002\000\004\024\u0167\001\002\000\004\006" +
    "\u0168\001\002\000\024\003\uffa3\024\uffa3\026\uffa3\036\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\001\002\000" +
    "\004\033\u016a\001\002\000\004\024\u016b\001\002\000\004" +
    "\006\u016c\001\002\000\024\003\uffa4\024\uffa4\026\uffa4\036" +
    "\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\062\uffa4\001\002" +
    "\000\010\047\u0172\050\u016f\051\u0170\001\002\000\012\005" +
    "\u0189\047\u0172\050\u016f\051\u0170\001\002\000\004\025\u017f" +
    "\001\002\000\004\025\u0176\001\002\000\012\005\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\001\002\000\004\061\u0173\001\002" +
    "\000\004\024\u0174\001\002\000\004\006\u0175\001\002\000" +
    "\012\005\uffc8\047\uffc8\050\uffc8\051\uffc8\001\002\000\004" +
    "\025\u0177\001\002\000\004\035\u0178\001\002\000\004\032" +
    "\u0179\001\002\000\004\033\u017a\001\002\000\004\067\u017b" +
    "\001\002\000\016\020\323\021\320\022\322\031\317\032" +
    "\316\065\315\001\002\000\004\024\u017d\001\002\000\004" +
    "\006\u017e\001\002\000\012\005\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\001\002\000\004\025\u0180\001\002\000\004\035\u0181" +
    "\001\002\000\004\032\u0182\001\002\000\004\033\u0183\001" +
    "\002\000\004\067\u0184\001\002\000\016\020\323\021\320" +
    "\022\322\031\317\032\316\065\315\001\002\000\004\024" +
    "\u0186\001\002\000\004\006\u0187\001\002\000\012\005\uffca" +
    "\047\uffca\050\uffca\051\uffca\001\002\000\012\005\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\001\002\000\004\024\u018a\001\002" +
    "\000\004\006\u018b\001\002\000\024\003\uffcd\024\uffcd\026" +
    "\uffcd\036\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u018a\000\004\002\003\001\001\000\002\001\001\000" +
    "\030\005\015\007\016\010\012\011\011\013\025\015\017" +
    "\016\005\017\013\032\022\056\023\057\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\015\007\016\010\012\011\011\013\025\016" +
    "\u0136\017\013\032\022\056\023\057\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\047\014\041\054\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\065\001\001\000\012\003\075" +
    "\022\071\053\073\054\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\075\022\101\053\073\054\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\075\053\104" +
    "\054\050\001\001\000\002\001\001\000\010\003\075\053" +
    "\106\054\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\055\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\075\053\130\054\050" +
    "\001\001\000\002\001\001\000\010\003\075\053\132\054" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\075\053\137\054" +
    "\050\001\001\000\002\001\001\000\010\003\075\053\141" +
    "\054\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\075\053\144\054\050\001\001\000\002\001\001" +
    "\000\010\003\075\053\146\054\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\075\053\151\054\050" +
    "\001\001\000\002\001\001\000\010\003\075\053\153\054" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\037\165\040\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\043\202\044\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\044\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\220\042" +
    "\216\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\256\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\045\277\046\303\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\342\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\320\001\001\000\002\001\001\000\012\003\075\022\326" +
    "\053\073\054\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\336\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\365\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\063\376\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\u0106\030\u0108\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u010a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\u0119" +
    "\027\u0117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u011e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\023\u0130\025\u012d\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u0135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\u0140\054" +
    "\050\061\u0141\062\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\u0140\054\050\061\u0141\062" +
    "\u0148\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\u014e\001\001\000\002\001\001\000\012\003\075\022\u0152" +
    "\053\073\054\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\u015c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\075\022" +
    "\u0168\053\073\054\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\u016d\034\u0170\001\001\000\004\034\u0187\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\u017b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\u0184" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM recorrido END PROGRAM 
            {
              Object RESULT =null;
		funciones.graficas.generarGraficas();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // recorrido ::= instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // recorrido ::= recorrido instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= declaracion 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= arreglos 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=arreglo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= funcionesgrafica 
            {
              Object RESULT =null;
		int fgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=fg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= printarreglos 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=pa;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= printexpresiones 
            {
              Object RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=pe;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionesgrafica ::= declaracionhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionesgrafica ::= declaracionbarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionesgrafica ::= declaracionpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionesgrafica ::= declaracionlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION tipodato END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.reportes.TablaDatos(td.toString(),id.toString(),tdd,varright,varleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.reportes.TablaDatos(tp.toString(),id.toString(),ex,varright,varleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipodedato ::= R_DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipodedato ::= R_CHAR CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipodato ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipodato ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipodato ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodato ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printarreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL IDENTIFICADOR GUION MAYORQUE nt END PUNTOYCOMA 
            {
              Object RESULT =null;
		int identileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ntlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ntlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ntl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String impresiones = (String) funciones.reportes.busqueda(identi);funciones.saltos.lista_general.add(funciones.saltos.lista_salto_de_linea((Object[])ntl,impresiones));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarreglos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // printarreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL CADENA GUION MAYORQUE nt END PUNTOYCOMA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int noterminallistasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int noterminallistasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object noterminallistas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String impresiones = cad.toString();funciones.saltos.lista_general.add(funciones.saltos.lista_salto_de_linea((Object[])noterminallistas,impresiones)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarreglos",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nt ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busquedaValor(arroba.toString()+id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nt ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.reportes.arreglos((LinkedList)el);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nt",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // printexpresiones ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL ciclo END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String dec=funciones.saltos.recepcion((LinkedList<Object>)cc);funciones.saltos.lista_general.add(dec);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printexpresiones",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ntexp ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(ni);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ntexp ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ntexp ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ntexp ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ntexp ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ciclo ::= ntexp 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> listaciclo = new LinkedList<Object>();
listaciclo.add(nt); RESULT = (LinkedList<Object>)listaciclo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ciclo ::= ntexp COMA ciclo 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object clo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> listaexpresion = new LinkedList<Object>();
listaexpresion.add(ne); listaexpresion.addAll((LinkedList)clo);
RESULT = (LinkedList<Object>)listaexpresion;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionlinea ::= GRAPHLINE PARENTESIS_A instruccionlinea PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionbarras ::= GRAPHBAR PARENTESIS_A instruccionbarras PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionbarras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionbarras ::= instruccionbarras contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccionbarras ::= contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenidobarras ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenidobarras ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL tipodato END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenidobarras ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenidobarras ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementosejex CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenidobarras ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementosejey CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contenidobarras ::= EXEC GRAPHBAR END PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // elementosejey ::= valory 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // elementosejey ::= elementosejey COMA valory 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // valory ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valory ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // valory ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valory",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // elementosejex ::= datox 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejex",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // elementosejex ::= elementosejex COMA datox 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementosejex",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // datox ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datox",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaracionhistograma ::= HISTOGRAM PARENTESIS_A instruccionhistograma PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionhistograma",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // instruccionhistograma ::= instruccionhistograma contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instruccionhistograma ::= contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidohistograma ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulo=dg.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidohistograma ::= VALUES DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Object[] hist = funciones.reportes.arreglos((LinkedList)dt);
double[] doubles = Arrays.stream(hist)
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray();
funciones.estadisticas.calcularFrecuenciass((double[])doubles); funciones.graficas.values=(double[])doubles;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenidohistograma ::= EXEC HISTOGRAM END PUNTOYCOMA 
            {
              Object RESULT =null;
		funciones.graficas.histograma();funciones.graficas.imageFiles.add(funciones.graficas.histograma());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elementoshistograma ::= valorhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoshistograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // elementoshistograma ::= elementoshistograma COMA valorhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoshistograma",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valorhistograma ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorhistograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valorhistograma ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorhistograma",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // declaracionlinea ::= GRAPHLINE PARENTESIS_A PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // instruccionlinea ::= instruccionlinea contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // instruccionlinea ::= contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenidolinea ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // contenidolinea ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // contenidolinea ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // contenidolinea ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // contenidolinea ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // contenidolinea ::= EXEC GRAPHLINE END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // elementoslinea ::= valorlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslinea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // elementoslinea ::= elementoslinea COMA valorlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslinea",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // valorlinea ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorlinea",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // valorlinea ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorlinea",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // elementoslineac ::= datoslineac 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // elementoslineac ::= elementoslineac COMA datoslineac 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // elementoslineac ::= datosgraficas 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslineac",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // datoslineac ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoslineac",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // declaracionpie ::= GRAPHPIE PARENTESIS_A instrucciongrafica PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionpie",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // instrucciongrafica ::= instrucciongrafica contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // instrucciongrafica ::= contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // contenidopie ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CADENA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // contenidopie ::= VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL CORCHETE_ABRE elementospie CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // contenidopie ::= LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL CORCHETE_ABRE elementoslabel CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // contenidopie ::= EXEC GRAPHPIE END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // elementospie ::= valorpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementospie",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // elementospie ::= elementospie COMA valorpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementospie",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // valorpie ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorpie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // valorpie ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorpie",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // elementoslabel ::= datoslabel 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslabel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // elementoslabel ::= elementoslabel COMA datoslabel 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementoslabel",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // datoslabel ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datoslabel",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arreglos ::= ARR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR MENORQUE GUION CORCHETE_ABRE elementos CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int identileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Object[] variableo=funciones.reportes.arreglos((LinkedList<Object>)tdd);funciones.reportes.TablaDatosObject(td.toString(),"@"+identi.toString(),(Object[])  variableo,arrright,arrleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arreglos ::= ARR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR MENORQUE GUION ARROBA IDENTIFICADOR END PUNTOYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Object[] variable=funciones.reportes.busquedaValor(arroba.toString()+identificador.toString());funciones.reportes.TablaDatosObject(td.toString(),ident.toString(),variable,arrright,arrleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // elementos ::= valorexpresion 
            {
              Object RESULT =null;
		int vexp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vexp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vexp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> le = new LinkedList<Object>();
        le.add(vexp1); RESULT = (LinkedList<Object>)le;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // elementos ::= valorexpresion COMA elementos 
            {
              Object RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ve = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> listaexpresiones = new LinkedList<Object>();
        listaexpresiones.add(ve); listaexpresiones.addAll((LinkedList)e);
        RESULT = (LinkedList<Object>)listaexpresiones;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // valor ::= DECIMAL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // valor ::= CADENA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // valor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // valor ::= ENTERO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valor",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expresion ::= SUM PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())+Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresion ::= RES PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())-Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresion ::= MUL PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())*Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresion ::= DIV PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())/Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresion ::= MOD PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())%Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresion ::= operacionesnest 
            {
              Object RESULT =null;
		int nestleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nestright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nest = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=nest;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // valorexpresion ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // valorexpresion ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // valorexpresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // valorexpresion ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=entero;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // valorexpresion ::= CADENA 
            {
              Object RESULT =null;
		int charmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String charm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=charm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operacionesnest ::= MEDIA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.media((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operacionesnest ::= MEDIANA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Mediana((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operacionesnest ::= MODA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Moda((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operacionesnest ::= VARIANZA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Varianza((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operacionesnest ::= MAX PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Maximo((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operacionesnest ::= MIN PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Minimo((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // arregloexpresiones ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		double[] doubles = Arrays.stream(funciones.reportes.busquedaValor(arroba.toString()+id.toString()))
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray();RESULT=doubles;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloexpresiones",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // arregloexpresiones ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloexpresiones",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // datosgraficas ::= ENTERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ent;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // datosgraficas ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // datosgraficas ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=cad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // datosgraficas ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busquedaValor(arr.toString()+id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // datosgraficas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // datosgraficas ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
