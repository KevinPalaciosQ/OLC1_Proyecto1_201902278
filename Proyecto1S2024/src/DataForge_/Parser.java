
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DataForge_;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Arrays;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\006\000\002\015" +
    "\003\000\002\015\004\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\004\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\005\015\000\002\005" +
    "\015\000\002\004\003\000\002\004\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\041\015\000\002\041\015\000\002\043\004\000\002" +
    "\043\005\000\002\042\012\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\045\003\000\002\045\005\000\002\013\010\000" +
    "\002\010\010\000\002\032\004\000\002\032\003\000\002" +
    "\033\014\000\002\033\014\000\002\033\014\000\002\033" +
    "\014\000\002\033\012\000\002\033\006\000\002\007\010" +
    "\000\002\030\004\000\002\030\003\000\002\031\014\000" +
    "\002\031\012\000\002\031\006\000\002\013\007\000\002" +
    "\034\004\000\002\034\003\000\002\035\014\000\002\035" +
    "\014\000\002\035\012\000\002\035\014\000\002\035\014" +
    "\000\002\035\006\000\002\011\010\000\002\025\004\000" +
    "\002\025\003\000\002\012\014\000\002\012\012\000\002" +
    "\012\014\000\002\012\006\000\002\017\020\000\002\017" +
    "\017\000\002\022\003\000\002\022\005\000\002\003\010" +
    "\000\002\003\010\000\002\003\010\000\002\003\010\000" +
    "\002\003\010\000\002\003\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\006\000\002\037\006\000\002\037\006" +
    "\000\002\037\006\000\002\037\006\000\002\037\006\000" +
    "\002\040\004\000\002\040\005\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\004\000\002\046" +
    "\003\000\002\046\005\000\002\047\004\000\002\047\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\023\005\001\002\000\004\002\u0174\001" +
    "\002\000\022\003\022\026\030\036\011\056\021\057\027" +
    "\060\025\061\007\062\015\001\002\000\024\003\uffff\024" +
    "\uffff\026\uffff\036\uffff\056\uffff\057\uffff\060\uffff\061\uffff" +
    "\062\uffff\001\002\000\004\004\u0157\001\002\000\024\003" +
    "\ufff9\024\ufff9\026\ufff9\036\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\062\ufff9\001\002\000\004\025\u0146\001\002\000" +
    "\024\003\ufff5\024\ufff5\026\ufff5\036\ufff5\056\ufff5\057\ufff5" +
    "\060\ufff5\061\ufff5\062\ufff5\001\002\000\024\003\ufff6\024" +
    "\ufff6\026\ufff6\036\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\001\002\000\024\003\ufffc\024\ufffc\026\ufffc\036" +
    "\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\001\002" +
    "\000\004\025\u0124\001\002\000\024\003\ufffd\024\ufffd\026" +
    "\ufffd\036\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd" +
    "\001\002\000\024\003\ufff7\024\ufff7\026\ufff7\036\ufff7\056" +
    "\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7\001\002\000\024" +
    "\003\022\024\u0122\026\030\036\011\056\021\057\027\060" +
    "\025\061\007\062\015\001\002\000\004\004\372\001\002" +
    "\000\004\006\371\001\002\000\024\003\ufffb\024\ufffb\026" +
    "\ufffb\036\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\062\ufffb" +
    "\001\002\000\024\003\ufffa\024\ufffa\026\ufffa\036\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\001\002\000\004" +
    "\004\273\001\002\000\024\003\ufff4\024\ufff4\026\ufff4\036" +
    "\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\062\ufff4\001\002" +
    "\000\004\004\162\001\002\000\004\025\031\001\002\000" +
    "\006\034\034\035\032\001\002\000\004\032\160\001\002" +
    "\000\004\025\035\001\002\000\004\025\ufff1\001\002\000" +
    "\004\025\036\001\002\000\004\065\037\001\002\000\004" +
    "\027\040\001\002\000\004\066\041\001\002\000\040\010" +
    "\047\011\044\012\062\013\052\014\043\020\057\021\046" +
    "\022\045\037\061\040\055\041\063\042\056\043\060\044" +
    "\054\065\053\001\002\000\004\024\156\001\002\000\004" +
    "\004\151\001\002\000\004\004\144\001\002\000\004\024" +
    "\uffee\001\002\000\004\024\uffef\001\002\000\004\004\137" +
    "\001\002\000\004\024\135\001\002\000\012\005\uffb6\007" +
    "\uffb6\024\uffb6\033\uffb6\001\002\000\004\004\130\001\002" +
    "\000\004\024\uffec\001\002\000\004\004\125\001\002\000" +
    "\004\004\122\001\002\000\004\004\117\001\002\000\004" +
    "\024\uffed\001\002\000\004\004\114\001\002\000\004\004" +
    "\111\001\002\000\004\004\104\001\002\000\004\004\064" +
    "\001\002\000\006\031\067\032\065\001\002\000\040\010" +
    "\047\011\044\012\062\013\052\014\043\020\100\021\075" +
    "\022\073\037\061\040\055\041\063\042\056\043\060\044" +
    "\054\065\077\001\002\000\004\005\071\001\002\000\004" +
    "\065\070\001\002\000\004\005\uffaa\001\002\000\012\005" +
    "\uffae\007\uffae\024\uffae\033\uffae\001\002\000\004\033\103" +
    "\001\002\000\010\005\uffb1\007\uffb1\033\uffb1\001\002\000" +
    "\006\007\101\033\uffbd\001\002\000\010\005\uffb4\007\uffb4" +
    "\033\uffb4\001\002\000\010\005\uffb5\007\uffb5\033\uffb5\001" +
    "\002\000\010\005\uffb3\007\uffb3\033\uffb3\001\002\000\010" +
    "\005\uffb2\007\uffb2\033\uffb2\001\002\000\040\010\047\011" +
    "\044\012\062\013\052\014\043\020\100\021\075\022\073" +
    "\037\061\040\055\041\063\042\056\043\060\044\054\065" +
    "\077\001\002\000\004\033\uffbc\001\002\000\004\005\uffa9" +
    "\001\002\000\040\010\047\011\044\012\062\013\052\014" +
    "\043\020\100\021\075\022\073\037\061\040\055\041\063" +
    "\042\056\043\060\044\054\065\077\001\002\000\004\007" +
    "\106\001\002\000\040\010\047\011\044\012\062\013\052" +
    "\014\043\020\100\021\075\022\073\037\061\040\055\041" +
    "\063\042\056\043\060\044\054\065\077\001\002\000\004" +
    "\005\110\001\002\000\012\005\uffb9\007\uffb9\024\uffb9\033" +
    "\uffb9\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\113\001\002\000\012\005\uffb0\007\uffb0\024\uffb0\033" +
    "\uffb0\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\116\001\002\000\012\005\uffac\007\uffac\024\uffac\033" +
    "\uffac\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\121\001\002\000\012\005\uffad\007\uffad\024\uffad\033" +
    "\uffad\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\124\001\002\000\012\005\uffaf\007\uffaf\024\uffaf\033" +
    "\uffaf\001\002\000\006\031\067\032\065\001\002\000\004" +
    "\005\127\001\002\000\012\005\uffab\007\uffab\024\uffab\033" +
    "\uffab\001\002\000\040\010\047\011\044\012\062\013\052" +
    "\014\043\020\100\021\075\022\073\037\061\040\055\041" +
    "\063\042\056\043\060\044\054\065\077\001\002\000\004" +
    "\007\132\001\002\000\040\010\047\011\044\012\062\013" +
    "\052\014\043\020\100\021\075\022\073\037\061\040\055" +
    "\041\063\042\056\043\060\044\054\065\077\001\002\000" +
    "\004\005\134\001\002\000\012\005\uffb8\007\uffb8\024\uffb8" +
    "\033\uffb8\001\002\000\004\006\136\001\002\000\024\003" +
    "\ufff2\024\ufff2\026\ufff2\036\ufff2\056\ufff2\057\ufff2\060\ufff2" +
    "\061\ufff2\062\ufff2\001\002\000\040\010\047\011\044\012" +
    "\062\013\052\014\043\020\100\021\075\022\073\037\061" +
    "\040\055\041\063\042\056\043\060\044\054\065\077\001" +
    "\002\000\004\007\141\001\002\000\040\010\047\011\044" +
    "\012\062\013\052\014\043\020\100\021\075\022\073\037" +
    "\061\040\055\041\063\042\056\043\060\044\054\065\077" +
    "\001\002\000\004\005\143\001\002\000\012\005\uffbb\007" +
    "\uffbb\024\uffbb\033\uffbb\001\002\000\040\010\047\011\044" +
    "\012\062\013\052\014\043\020\100\021\075\022\073\037" +
    "\061\040\055\041\063\042\056\043\060\044\054\065\077" +
    "\001\002\000\004\007\146\001\002\000\040\010\047\011" +
    "\044\012\062\013\052\014\043\020\100\021\075\022\073" +
    "\037\061\040\055\041\063\042\056\043\060\044\054\065" +
    "\077\001\002\000\004\005\150\001\002\000\012\005\uffba" +
    "\007\uffba\024\uffba\033\uffba\001\002\000\040\010\047\011" +
    "\044\012\062\013\052\014\043\020\100\021\075\022\073" +
    "\037\061\040\055\041\063\042\056\043\060\044\054\065" +
    "\077\001\002\000\004\007\153\001\002\000\040\010\047" +
    "\011\044\012\062\013\052\014\043\020\100\021\075\022" +
    "\073\037\061\040\055\041\063\042\056\043\060\044\054" +
    "\065\077\001\002\000\004\005\155\001\002\000\012\005" +
    "\uffb7\007\uffb7\024\uffb7\033\uffb7\001\002\000\004\006\157" +
    "\001\002\000\024\003\ufff3\024\ufff3\026\ufff3\036\ufff3\056" +
    "\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\001\002\000\004" +
    "\033\161\001\002\000\004\025\ufff0\001\002\000\016\047" +
    "\170\050\163\053\172\054\171\063\165\064\164\001\002" +
    "\000\004\025\262\001\002\000\004\025\251\001\002\000" +
    "\004\025\227\001\002\000\020\005\223\047\170\050\163" +
    "\053\172\054\171\063\165\064\164\001\002\000\020\005" +
    "\uffdc\047\uffdc\050\uffdc\053\uffdc\054\uffdc\063\uffdc\064\uffdc" +
    "\001\002\000\004\057\220\001\002\000\004\025\211\001" +
    "\002\000\004\025\173\001\002\000\004\025\174\001\002" +
    "\000\004\035\175\001\002\000\004\032\176\001\002\000" +
    "\004\033\177\001\002\000\004\067\200\001\002\000\006" +
    "\031\203\032\201\001\002\000\040\010\047\011\044\012" +
    "\062\013\052\014\043\020\100\021\075\022\073\037\061" +
    "\040\055\041\063\042\056\043\060\044\054\065\077\001" +
    "\002\000\004\024\205\001\002\000\004\065\204\001\002" +
    "\000\004\024\uffa2\001\002\000\004\006\206\001\002\000" +
    "\020\005\uffd8\047\uffd8\050\uffd8\053\uffd8\054\uffd8\063\uffd8" +
    "\064\uffd8\001\002\000\004\033\210\001\002\000\004\024" +
    "\uffa1\001\002\000\004\025\212\001\002\000\004\034\213" +
    "\001\002\000\004\067\214\001\002\000\006\031\203\032" +
    "\201\001\002\000\004\024\216\001\002\000\004\006\217" +
    "\001\002\000\020\005\uffd7\047\uffd7\050\uffd7\053\uffd7\054" +
    "\uffd7\063\uffd7\064\uffd7\001\002\000\004\024\221\001\002" +
    "\000\004\006\222\001\002\000\020\005\uffd6\047\uffd6\050" +
    "\uffd6\053\uffd6\054\uffd6\063\uffd6\064\uffd6\001\002\000\004" +
    "\024\225\001\002\000\020\005\uffdd\047\uffdd\050\uffdd\053" +
    "\uffdd\054\uffdd\063\uffdd\064\uffdd\001\002\000\004\006\226" +
    "\001\002\000\024\003\uffde\024\uffde\026\uffde\036\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\001\002\000\004" +
    "\025\230\001\002\000\004\035\231\001\002\000\004\032" +
    "\232\001\002\000\004\033\233\001\002\000\004\067\234" +
    "\001\002\000\016\020\242\021\240\022\241\031\237\032" +
    "\236\065\235\001\002\000\004\024\uffa4\001\002\000\040" +
    "\010\047\011\044\012\062\013\052\014\043\020\100\021" +
    "\075\022\073\037\061\040\055\041\063\042\056\043\060" +
    "\044\054\065\077\001\002\000\004\065\246\001\002\000" +
    "\004\024\uffa7\001\002\000\004\024\uffa6\001\002\000\004" +
    "\024\uffa8\001\002\000\004\024\244\001\002\000\004\006" +
    "\245\001\002\000\020\005\uffdb\047\uffdb\050\uffdb\053\uffdb" +
    "\054\uffdb\063\uffdb\064\uffdb\001\002\000\004\024\uffa5\001" +
    "\002\000\004\033\250\001\002\000\004\024\uffa3\001\002" +
    "\000\004\025\252\001\002\000\004\035\253\001\002\000" +
    "\004\032\254\001\002\000\004\033\255\001\002\000\004" +
    "\067\256\001\002\000\016\020\242\021\240\022\241\031" +
    "\237\032\236\065\235\001\002\000\004\024\260\001\002" +
    "\000\004\006\261\001\002\000\020\005\uffda\047\uffda\050" +
    "\uffda\053\uffda\054\uffda\063\uffda\064\uffda\001\002\000\004" +
    "\025\263\001\002\000\004\035\264\001\002\000\004\032" +
    "\265\001\002\000\004\033\266\001\002\000\004\067\267" +
    "\001\002\000\016\020\242\021\240\022\241\031\237\032" +
    "\236\065\235\001\002\000\004\024\271\001\002\000\004" +
    "\006\272\001\002\000\020\005\uffd9\047\uffd9\050\uffd9\053" +
    "\uffd9\054\uffd9\063\uffd9\064\uffd9\001\002\000\020\005\303" +
    "\047\276\050\274\053\277\054\275\063\302\064\301\001" +
    "\002\000\004\025\360\001\002\000\004\025\351\001\002" +
    "\000\004\060\346\001\002\000\004\025\335\001\002\000" +
    "\020\005\331\047\276\050\274\053\277\054\275\063\302" +
    "\064\301\001\002\000\004\025\320\001\002\000\004\025" +
    "\307\001\002\000\004\024\305\001\002\000\020\005\uffcd" +
    "\047\uffcd\050\uffcd\053\uffcd\054\uffcd\063\uffcd\064\uffcd\001" +
    "\002\000\004\006\306\001\002\000\024\003\uffcf\024\uffcf" +
    "\026\uffcf\036\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062" +
    "\uffcf\001\002\000\004\025\310\001\002\000\004\035\311" +
    "\001\002\000\004\032\312\001\002\000\004\033\313\001" +
    "\002\000\004\067\314\001\002\000\016\020\242\021\240" +
    "\022\241\031\237\032\236\065\235\001\002\000\004\024" +
    "\316\001\002\000\004\006\317\001\002\000\020\005\uffc9" +
    "\047\uffc9\050\uffc9\053\uffc9\054\uffc9\063\uffc9\064\uffc9\001" +
    "\002\000\004\025\321\001\002\000\004\035\322\001\002" +
    "\000\004\032\323\001\002\000\004\033\324\001\002\000" +
    "\004\067\325\001\002\000\016\020\242\021\240\022\241" +
    "\031\237\032\236\065\235\001\002\000\004\024\327\001" +
    "\002\000\004\006\330\001\002\000\020\005\uffc8\047\uffc8" +
    "\050\uffc8\053\uffc8\054\uffc8\063\uffc8\064\uffc8\001\002\000" +
    "\004\024\333\001\002\000\020\005\uffce\047\uffce\050\uffce" +
    "\053\uffce\054\uffce\063\uffce\064\uffce\001\002\000\004\006" +
    "\334\001\002\000\024\003\uffdf\024\uffdf\026\uffdf\036\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000" +
    "\004\025\336\001\002\000\004\035\337\001\002\000\004" +
    "\032\340\001\002\000\004\033\341\001\002\000\004\067" +
    "\342\001\002\000\006\031\203\032\201\001\002\000\004" +
    "\024\344\001\002\000\004\006\345\001\002\000\020\005" +
    "\uffcb\047\uffcb\050\uffcb\053\uffcb\054\uffcb\063\uffcb\064\uffcb" +
    "\001\002\000\004\024\347\001\002\000\004\006\350\001" +
    "\002\000\020\005\uffc7\047\uffc7\050\uffc7\053\uffc7\054\uffc7" +
    "\063\uffc7\064\uffc7\001\002\000\004\025\352\001\002\000" +
    "\004\034\353\001\002\000\004\067\354\001\002\000\006" +
    "\031\203\032\201\001\002\000\004\024\356\001\002\000" +
    "\004\006\357\001\002\000\020\005\uffca\047\uffca\050\uffca" +
    "\053\uffca\054\uffca\063\uffca\064\uffca\001\002\000\004\025" +
    "\361\001\002\000\004\035\362\001\002\000\004\032\363" +
    "\001\002\000\004\033\364\001\002\000\004\067\365\001" +
    "\002\000\016\020\242\021\240\022\241\031\237\032\236" +
    "\065\235\001\002\000\004\024\367\001\002\000\004\006" +
    "\370\001\002\000\020\005\uffcc\047\uffcc\050\uffcc\053\uffcc" +
    "\054\uffcc\063\uffcc\064\uffcc\001\002\000\024\003\ufff8\024" +
    "\ufff8\026\ufff8\036\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\062\ufff8\001\002\000\012\047\377\050\373\051\374\052" +
    "\375\001\002\000\004\025\u0118\001\002\000\004\025\u0111" +
    "\001\002\000\004\025\u0108\001\002\000\014\005\uffc4\047" +
    "\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\004\056\u0105" +
    "\001\002\000\014\005\u0101\047\377\050\373\051\374\052" +
    "\375\001\002\000\004\024\u0103\001\002\000\014\005\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\001\002\000\004\006" +
    "\u0104\001\002\000\024\003\uffc6\024\uffc6\026\uffc6\036\uffc6" +
    "\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002\000" +
    "\004\024\u0106\001\002\000\004\006\u0107\001\002\000\014" +
    "\005\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\001\002\000" +
    "\004\025\u0109\001\002\000\004\035\u010a\001\002\000\004" +
    "\032\u010b\001\002\000\004\033\u010c\001\002\000\004\067" +
    "\u010d\001\002\000\006\031\203\032\201\001\002\000\004" +
    "\024\u010f\001\002\000\004\006\u0110\001\002\000\014\005" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\001\002\000\004" +
    "\025\u0112\001\002\000\004\034\u0113\001\002\000\004\067" +
    "\u0114\001\002\000\006\031\203\032\201\001\002\000\004" +
    "\024\u0116\001\002\000\004\006\u0117\001\002\000\014\005" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\001\002\000\004" +
    "\025\u0119\001\002\000\004\035\u011a\001\002\000\004\032" +
    "\u011b\001\002\000\004\033\u011c\001\002\000\004\067\u011d" +
    "\001\002\000\016\020\242\021\240\022\241\031\237\032" +
    "\236\065\235\001\002\000\004\024\u011f\001\002\000\004" +
    "\006\u0120\001\002\000\014\005\uffc3\047\uffc3\050\uffc3\051" +
    "\uffc3\052\uffc3\001\002\000\024\003\ufffe\024\ufffe\026\ufffe" +
    "\036\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe\062\ufffe\001" +
    "\002\000\004\023\u0123\001\002\000\004\002\000\001\002" +
    "\000\004\025\u0125\001\002\000\006\045\u0127\046\u0126\001" +
    "\002\000\004\067\u0134\001\002\000\004\067\u0128\001\002" +
    "\000\040\010\047\011\044\012\062\013\052\014\043\020" +
    "\u012e\021\u012a\022\u0129\037\061\040\055\041\063\042\056" +
    "\043\060\044\054\065\u012d\001\002\000\006\007\uffe5\024" +
    "\uffe5\001\002\000\006\007\uffe3\024\uffe3\001\002\000\006" +
    "\007\uffe2\024\uffe2\001\002\000\006\007\u0132\024\uffe1\001" +
    "\002\000\006\007\uffe6\024\uffe6\001\002\000\006\007\uffe4" +
    "\024\uffe4\001\002\000\004\024\u0130\001\002\000\004\006" +
    "\u0131\001\002\000\024\003\uffe7\024\uffe7\026\uffe7\036\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\001\002\000" +
    "\040\010\047\011\044\012\062\013\052\014\043\020\u012e" +
    "\021\u012a\022\u0129\037\061\040\055\041\063\042\056\043" +
    "\060\044\054\065\u012d\001\002\000\004\024\uffe0\001\002" +
    "\000\006\022\u0136\065\u0135\001\002\000\004\066\u0141\001" +
    "\002\000\004\066\u0137\001\002\000\004\030\u0138\001\002" +
    "\000\006\031\u013b\032\u013a\001\002\000\004\024\u013f\001" +
    "\002\000\040\010\047\011\044\012\062\013\052\014\043" +
    "\020\100\021\075\022\073\037\061\040\055\041\063\042" +
    "\056\043\060\044\054\065\077\001\002\000\004\065\u013c" +
    "\001\002\000\004\024\uffe9\001\002\000\004\033\u013e\001" +
    "\002\000\004\024\uffe8\001\002\000\004\006\u0140\001\002" +
    "\000\024\003\uffea\024\uffea\026\uffea\036\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\001\002\000\004\030\u0142" +
    "\001\002\000\006\031\u013b\032\u013a\001\002\000\004\024" +
    "\u0144\001\002\000\004\006\u0145\001\002\000\024\003\uffeb" +
    "\024\uffeb\026\uffeb\036\uffeb\056\uffeb\057\uffeb\060\uffeb\061" +
    "\uffeb\062\uffeb\001\002\000\006\034\034\035\032\001\002" +
    "\000\004\025\u0148\001\002\000\004\025\u0149\001\002\000" +
    "\004\031\u014a\001\002\000\004\065\u014b\001\002\000\004" +
    "\027\u014c\001\002\000\004\066\u014d\001\002\000\006\031" +
    "\u014f\032\u014e\001\002\000\040\010\047\011\044\012\062" +
    "\013\052\014\043\020\100\021\075\022\073\037\061\040" +
    "\055\041\063\042\056\043\060\044\054\065\077\001\002" +
    "\000\004\065\u0150\001\002\000\004\024\u0151\001\002\000" +
    "\004\006\u0152\001\002\000\024\003\uffbe\024\uffbe\026\uffbe" +
    "\036\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\001" +
    "\002\000\004\033\u0154\001\002\000\004\024\u0155\001\002" +
    "\000\004\006\u0156\001\002\000\024\003\uffbf\024\uffbf\026" +
    "\uffbf\036\uffbf\056\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf" +
    "\001\002\000\010\047\u015c\050\u0159\051\u015a\001\002\000" +
    "\012\005\u0171\047\u015c\050\u0159\051\u015a\001\002\000\004" +
    "\025\u0167\001\002\000\004\025\u0160\001\002\000\012\005" +
    "\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000\004\061\u015d" +
    "\001\002\000\004\024\u015e\001\002\000\004\006\u015f\001" +
    "\002\000\012\005\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002" +
    "\000\004\025\u0161\001\002\000\004\034\u0162\001\002\000" +
    "\004\067\u0163\001\002\000\006\031\203\032\201\001\002" +
    "\000\004\024\u0165\001\002\000\004\006\u0166\001\002\000" +
    "\012\005\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002\000\004" +
    "\025\u0168\001\002\000\004\035\u0169\001\002\000\004\032" +
    "\u016a\001\002\000\004\033\u016b\001\002\000\004\067\u016c" +
    "\001\002\000\016\020\242\021\240\022\241\031\237\032" +
    "\236\065\235\001\002\000\004\024\u016e\001\002\000\004" +
    "\006\u016f\001\002\000\012\005\uffd2\047\uffd2\050\uffd2\051" +
    "\uffd2\001\002\000\012\005\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\001\002\000\004\024\u0172\001\002\000\004\006\u0173\001" +
    "\002\000\024\003\uffd5\024\uffd5\026\uffd5\036\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0172\000\004\002\003\001\001\000\002\001\001\000" +
    "\030\005\015\007\016\010\012\011\011\013\025\015\017" +
    "\016\005\017\013\027\022\041\023\042\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\005\015\007\016\010\012\011\011\013\025\016" +
    "\u0120\017\013\027\022\041\023\042\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\047\014\041\037\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\065\001\001\000\012\003\075" +
    "\022\071\036\073\037\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\075\022\101\036\073\037\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\075\036\104" +
    "\037\050\001\001\000\002\001\001\000\010\003\075\036" +
    "\106\037\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\040\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\040\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\075\036\130\037\050" +
    "\001\001\000\002\001\001\000\010\003\075\036\132\037" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\075\036\137\037" +
    "\050\001\001\000\002\001\001\000\010\003\075\036\141" +
    "\037\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\075\036\144\037\050\001\001\000\002\001\001" +
    "\000\010\003\075\036\146\037\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\075\036\151\037\050" +
    "\001\001\000\002\001\001\000\010\003\075\036\153\037" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\165\033\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\201\001\001\000\012\003\075\022\206\036\073\037" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\214\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\242\001\001\000\002" +
    "\001\001\000\012\003\075\022\246\036\073\037\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\256" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\034\277\035\303\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\331\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\047" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\354\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\365\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\375\025" +
    "\377\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u010d\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u011d\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\u012a" +
    "\037\050\044\u012b\045\u012e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\u012a\037\050\044\u012b" +
    "\045\u0132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\u0138\001\001\000\002\001\001\000\012\003\075\022" +
    "\u013c\036\073\037\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\u0142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\u0146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\075" +
    "\022\u0152\036\073\037\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\030\u0157\031\u015a\001\001\000\004\031\u016f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u016c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sintáctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= PROGRAM recorrido END PROGRAM 
            {
              Object RESULT =null;
		funciones.graficas.generarGraficas();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // recorrido ::= instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // recorrido ::= recorrido instrucciones 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("recorrido",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= declaracion 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= arreglos 
            {
              Object RESULT =null;
		int arregloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int arregloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object arreglo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=arreglo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instrucciones ::= funcionesgrafica 
            {
              Object RESULT =null;
		int fgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=fg;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instrucciones ::= printarreglos 
            {
              Object RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pa = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=pa;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instrucciones ::= printexpresiones 
            {
              Object RESULT =null;
		int peleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int peright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object pe = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=pe;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instrucciones ::= error PUNTOYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // funcionesgrafica ::= declaracionhistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // funcionesgrafica ::= declaracionbarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // funcionesgrafica ::= declaracionpie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // funcionesgrafica ::= declaracionlinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcionesgrafica",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION tipodato END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.reportes.TablaDatos(td.toString(),id.toString(),tdd,varright,varleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= VAR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS IDENTIFICADOR MENORQUE GUION expresion END PUNTOYCOMA 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.reportes.TablaDatos(tp.toString(),id.toString(),ex,varright,varleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tipodedato ::= R_DOUBLE 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipodedato ::= R_CHAR CORCHETE_ABRE CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodedato",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipodato ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tipodato ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipodato ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipodato ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipodato",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // printarreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL IDENTIFICADOR GUION MAYORQUE nt END PUNTOYCOMA 
            {
              Object RESULT =null;
		int identileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ntlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ntlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ntl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String impresiones = (String) funciones.reportes.busqueda(identi);funciones.saltos.lista_general.add(funciones.saltos.lista_salto_de_linea((Object[])ntl,impresiones));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarreglos",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // printarreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL CADENA GUION MAYORQUE nt END PUNTOYCOMA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int noterminallistasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int noterminallistasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object noterminallistas = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String impresiones = cad.toString();funciones.saltos.lista_general.add(funciones.saltos.lista_salto_de_linea((Object[])noterminallistas,impresiones)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarreglos",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nt ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busquedaValor(arroba.toString()+id.toString());System.out.println("impresion arreglos: "+arroba+id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nt ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.reportes.arreglos((LinkedList)el);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nt",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // printexpresiones ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL ciclo END PUNTOYCOMA 
            {
              Object RESULT =null;
		int ccleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String dec=funciones.saltos.recepcion((LinkedList<Object>)cc);funciones.saltos.lista_general.add(dec);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printexpresiones",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ntexp ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int nileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int niright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ni = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(ni);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ntexp ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ntexp ::= ENTERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ntexp ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ntexp ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ntexp",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ciclo ::= ntexp 
            {
              Object RESULT =null;
		int ntleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ntright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> listaciclo = new LinkedList<Object>();
listaciclo.add(nt); RESULT = (LinkedList<Object>)listaciclo;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ciclo ::= ntexp COMA ciclo 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cloleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object clo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> listaexpresion = new LinkedList<Object>();
listaexpresion.add(ne); listaexpresion.addAll((LinkedList)clo);
RESULT = (LinkedList<Object>)listaexpresion;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ciclo",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionlinea ::= GRAPHLINE PARENTESIS_A instruccionlinea PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declaracionbarras ::= GRAPHBAR PARENTESIS_A instruccionbarras PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionbarras",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // instruccionbarras ::= instruccionbarras contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instruccionbarras ::= contenidobarras 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionbarras",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // contenidobarras ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulox=tx.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // contenidobarras ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.tituloy=ty.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // contenidobarras ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulo=t.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // contenidobarras ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String[] strings = Arrays.stream((Object[])dx)
                                 .map(Object::toString)
                                 .toArray(String[]::new);funciones.graficas.ejex=strings ;System.out.println("Ejex :"+dx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // contenidobarras ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                 double[] doubles = Arrays.stream((Object[])dy)
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray(); funciones.graficas.ejey=(double[])doubles;System.out.println("Ejey: "+dy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // contenidobarras ::= EXEC GRAPHBAR END PUNTOYCOMA 
            {
              Object RESULT =null;
		funciones.graficas.barras();funciones.graficas.imageFiles.add(funciones.graficas.barras());funciones.graficas.limpiarParametros();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidobarras",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionhistograma ::= HISTOGRAM PARENTESIS_A instruccionhistograma PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionhistograma",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // instruccionhistograma ::= instruccionhistograma contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instruccionhistograma ::= contenidohistograma 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionhistograma",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // contenidohistograma ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dgleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dgright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulo=dg.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // contenidohistograma ::= VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		double[] doubles = Arrays.stream((Object[])dt)
                         .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                         .toArray();funciones.estadisticas.calcularFrecuenciass(doubles);

funciones.graficas.values = doubles;
System.out.println("values: " + Arrays.toString(doubles));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // contenidohistograma ::= EXEC HISTOGRAM END PUNTOYCOMA 
            {
              Object RESULT =null;
		funciones.graficas.histograma();funciones.graficas.imageFiles.add(funciones.graficas.histograma());funciones.graficas.limpiarParametros();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidohistograma",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaracionlinea ::= GRAPHLINE PARENTESIS_A PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionlinea",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instruccionlinea ::= instruccionlinea contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instruccionlinea ::= contenidolinea 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccionlinea",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // contenidolinea ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulo=t.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // contenidolinea ::= EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dxxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dxxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dxx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String[] strings = Arrays.stream((Object[])dxx)
                                 .map(Object::toString)
                                 .toArray(String[]::new);funciones.graficas.ejex=strings ;System.out.println("Ejex :"+dxx);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // contenidolinea ::= EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dyyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dyyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dyy = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                 double[] doubles = Arrays.stream((Object[])dyy)
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray(); funciones.graficas.ejey=(double[])doubles;System.out.println("Ejey: "+dyy);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // contenidolinea ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tx = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulox=tx.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // contenidolinea ::= TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.tituloy=ty.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // contenidolinea ::= EXEC GRAPHLINE END PUNTOYCOMA 
            {
              Object RESULT =null;
		funciones.graficas.linea();funciones.graficas.imageFiles.add(funciones.graficas.linea());funciones.graficas.limpiarParametros();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidolinea",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaracionpie ::= GRAPHPIE PARENTESIS_A instrucciongrafica PARENTESIS_C END PUNTOYCOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracionpie",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // instrucciongrafica ::= instrucciongrafica contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // instrucciongrafica ::= contenidopie 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciongrafica",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // contenidopie ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		funciones.graficas.titulo=t.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // contenidopie ::= VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object dv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                                 double[] doubles = Arrays.stream((Object[])dv)
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray(); funciones.graficas.values=(double[])doubles;System.out.println("Values: "+dv);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // contenidopie ::= LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas1 END PUNTOYCOMA 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		String[] strings = Arrays.stream((Object[])l)
                                 .map(Object::toString)
                                 .toArray(String[]::new);funciones.graficas.label=strings ;System.out.println("Label :"+l);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // contenidopie ::= EXEC GRAPHPIE END PUNTOYCOMA 
            {
              Object RESULT =null;
		funciones.graficas.pie();funciones.graficas.imageFiles.add(funciones.graficas.pie());funciones.graficas.limpiarParametros();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("contenidopie",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arreglos ::= ARR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR MENORQUE GUION CORCHETE_ABRE elementos CORCHETE_CIERRA END PUNTOYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int identileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int identiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String identi = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int tddleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tddright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object tdd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Object[] variableo=funciones.reportes.arreglos((LinkedList<Object>)tdd);funciones.reportes.TablaDatosObject(td.toString(),"@"+identi.toString(),(Object[])  variableo,arrright,arrleft);System.out.println("declaracion arreglo: "+identi);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arreglos ::= ARR DOSPUNTOS tipodedato DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR MENORQUE GUION ARROBA IDENTIFICADOR END PUNTOYCOMA 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Object[] variable=funciones.reportes.busquedaValor(arroba.toString()+identificador.toString());funciones.reportes.TablaDatosObject(td.toString(),"@"+ident.toString(),variable,arrright,arrleft);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arreglos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // elementos ::= valorexpresion 
            {
              Object RESULT =null;
		int vexp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vexp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object vexp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> le = new LinkedList<Object>();
        le.add(vexp1); RESULT = (LinkedList<Object>)le;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // elementos ::= valorexpresion COMA elementos 
            {
              Object RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ve = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		LinkedList<Object> listaexpresiones = new LinkedList<Object>();
        listaexpresiones.add(ve); listaexpresiones.addAll((LinkedList)e);
        RESULT = (LinkedList<Object>)listaexpresiones;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elementos",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= SUM PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())+Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= RES PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())-Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= MUL PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())*Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= DIV PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())/Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= MOD PARENTESIS_A valorexpresion COMA valorexpresion PARENTESIS_C 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=Double.parseDouble(a.toString())%Double.parseDouble(b.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= operacionesnest 
            {
              Object RESULT =null;
		int nestleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nestright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nest = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=nest;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // valorexpresion ::= expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=e;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // valorexpresion ::= DECIMAL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // valorexpresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // valorexpresion ::= ENTERO 
            {
              Object RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String entero = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=entero;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // valorexpresion ::= CADENA 
            {
              Object RESULT =null;
		int charmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int charmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String charm = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=charm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorexpresion",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operacionesnest ::= MEDIA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.media((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operacionesnest ::= MEDIANA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Mediana((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operacionesnest ::= MODA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Moda((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operacionesnest ::= VARIANZA PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Varianza((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operacionesnest ::= MAX PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Maximo((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operacionesnest ::= MIN PARENTESIS_A arregloexpresiones PARENTESIS_C 
            {
              Object RESULT =null;
		int arregloexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arregloexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object arregloexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=funciones.estadisticas.Minimo((double[]) arregloexp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operacionesnest",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arregloexpresiones ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrobaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrobaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arroba = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		double[] doubles = Arrays.stream(funciones.reportes.busquedaValor(arroba.toString()+id.toString()))
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray();RESULT=doubles;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloexpresiones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arregloexpresiones ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arregloexpresiones",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // datosgraficas ::= ENTERO 
            {
              Object RESULT =null;
		int entleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int entright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ent = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=ent;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // datosgraficas ::= DECIMAL 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // datosgraficas ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=cad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // datosgraficas ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busquedaValor(arr.toString()+id.toString());System.out.println("Datosgrafica:"+arr+id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // datosgraficas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busqueda(id.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // datosgraficas ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=el;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // datosgraficas1 ::= ARROBA IDENTIFICADOR 
            {
              Object RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arr = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=funciones.reportes.busquedaValor(arr.toString()+id.toString());System.out.println("Datosgrafica:"+arr+id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // datosgraficas1 ::= CORCHETE_ABRE elementos CORCHETE_CIERRA 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Object[] variable=funciones.reportes.arreglos((LinkedList)el);RESULT=variable;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datosgraficas1",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
