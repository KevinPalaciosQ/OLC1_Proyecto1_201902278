// ------------  Paquete e importaciones ------------
package DataForge_;

import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.Arrays;

//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code 
{:
    public static String resultado = ""; 

    public void syntax_error(Symbol s)
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sint치ctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            funciones.reportes.TablaErroresDF((String)s.value, "Error Sint치ctico", s.right, s.left);
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaraci칩n de terminales
terminal String PARENTESIS_A, PARENTESIS_C, PUNTOYCOMA,COMA;
terminal String SUM, RES,MUL,DIV, MOD;
terminal String POR, MAS;
terminal String R_MOSTRAR;
terminal String ENTERO;
terminal String DECIMAL,CADENA;
terminal String PROGRAM;
terminal String END;
terminal String DOSPUNTOS;
terminal String VAR;
terminal String MENORQUE,MAYORQUE;
terminal String ARROBA;
terminal String CORCHETE_ABRE;
terminal String CORCHETE_CIERRA;
terminal String R_DOUBLE;
terminal String R_CHAR;
terminal String ARR;
terminal String MEDIA;
terminal String MEDIANA;
terminal String MODA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;
terminal String PRINT;
terminal String COLUMN;
terminal String EXEC;
terminal String TITULO;
terminal String VALUES;
terminal String LABEL;
terminal String EJEX;
terminal String EJEY;
terminal String GRAPPIE;
terminal String GRAPHPIE;
terminal String GRAPHBAR;
terminal String GRAPHLINE;
terminal String HISTOGRAM;
terminal String CONSOLE;
terminal String TITULOX,TITULOY;
terminal String IDENTIFICADOR;
terminal String GUION;
terminal String IGUAL;
terminal String GRAPBAR;
terminal String GRAPLINE;
//------> Declaraci칩n de no terminales
non terminal inicio;
non terminal expresion;
non terminal tipodedato;
non terminal declaracion;
non terminal tipodegrafica;
non terminal declaracionhistograma;
non terminal declaracionbarras;
non terminal declaracionpie;
non terminal contenidopie;
non terminal declaracionlinea;
non terminal tipodato;
non terminal recorrido;
non terminal instrucciones;
non terminal arreglos;
non terminal operaciones;
non terminal operacion;
non terminal elementos;
non terminal elementospie;
non terminal valor;
non terminal valorpie;
non terminal datoslabel;
non terminal elementoslabel;
non terminal instrucciongrafica;
non terminal buclegrafica;
non terminal funcionesgrafica;
non terminal instruccionhistograma;
non terminal contenidohistograma;
non terminal elementoshistograma;
non terminal valorhistograma;
non terminal instruccionbarras; 
non terminal contenidobarras;
non terminal elementosejey;
non terminal valory;
non terminal elementosejex;
non terminal datox;
non terminal instruccionlinea;
non terminal contenidolinea;
non terminal elementoslinea;
non terminal valorlinea;
non terminal elementoslineac;
non terminal datoslineac;
non terminal valorexpresion;
non terminal operacionesnest;
non terminal arregloexpresiones;
non terminal printarreglos;
non terminal printexpresiones;
non terminal nt;
non terminal ntexp;
non terminal ciclo;
non terminal datosgraficas;
//------> PRECEDENCIA
precedence left MAS;
precedence left POR;


//------> Definir Simbolo Inicial
start with inicio; 


// ------------>  Producciones  <------------

inicio ::= PROGRAM recorrido END PROGRAM  {:funciones.graficas.generarGraficas();:}
;

recorrido ::= instrucciones         {::}
        |recorrido instrucciones    {::}
;

instrucciones ::= declaracion:dec  {:RESULT=dec;:}
    | arreglos:arreglo             {:RESULT=arreglo;:}
    | funcionesgrafica:fg          {:RESULT=fg;:}
    | printarreglos:pa             {:RESULT=pa;:}
    | printexpresiones:pe          {:RESULT=pe;:}
    | error PUNTOYCOMA             

;

funcionesgrafica ::= declaracionhistograma  {::}
    |declaracionbarras                      {::}
    |declaracionpie                         {::}
    |declaracionlinea                       {::}
;

declaracion ::= VAR:var DOSPUNTOS tipodedato:td DOSPUNTOS DOSPUNTOS IDENTIFICADOR:id MENORQUE GUION  tipodato:tdd END PUNTOYCOMA {:funciones.reportes.TablaDatos(td.toString(),id.toString(),tdd,varright,varleft);:}
            |VAR:var DOSPUNTOS tipodedato:tp DOSPUNTOS DOSPUNTOS IDENTIFICADOR:id MENORQUE GUION  expresion:ex END PUNTOYCOMA    {:funciones.reportes.TablaDatos(tp.toString(),id.toString(),ex,varright,varleft);:}
 //           |VAR:var DOSPUNTOS tipodedato:tp DOSPUNTOS DOSPUNTOS IDENTIFICADOR:identificador MENORQUE GUION  IDENTIFICADOR:id END PUNTOYCOMA   {:Object variable=funciones.reportes.busqueda(arroba.toString()+id.toString());funciones.reportes.TablaDatos(td.toString(),identificador.toString(),variable,varright,varleft);:}
;
tipodedato ::= R_DOUBLE:d {:RESULT=d;:}
        |R_CHAR:c CORCHETE_ABRE CORCHETE_CIERRA {:RESULT=c;:}
;

tipodato ::= DECIMAL:dec {:RESULT=dec;:}
        |CADENA:c {:RESULT=c;:}
        |ENTERO:e {:RESULT=e;:}
        |IDENTIFICADOR:id{:RESULT=funciones.reportes.busqueda(id);:}
        
;
//----------------------------------------IMPRESIONES

printarreglos ::= CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL IDENTIFICADOR:identi GUION MAYORQUE nt:ntl END PUNTOYCOMA  {:String impresiones = (String) funciones.reportes.busqueda(identi);funciones.saltos.lista_general.add(funciones.saltos.lista_salto_de_linea((Object[])ntl,impresiones));:} 
        |CONSOLE DOSPUNTOS DOSPUNTOS COLUMN IGUAL CADENA:cad GUION MAYORQUE nt:noterminallistas END PUNTOYCOMA        {:String impresiones = cad.toString();funciones.saltos.lista_general.add(funciones.saltos.lista_salto_de_linea((Object[])noterminallistas,impresiones)); :}
         
;
nt ::= ARROBA:arroba IDENTIFICADOR:id               {:RESULT=funciones.reportes.busquedaValor(arroba.toString()+id.toString());:} 
        |CORCHETE_ABRE elementos:el CORCHETE_CIERRA {:RESULT=funciones.reportes.arreglos((LinkedList)el);:}
;
printexpresiones ::= CONSOLE DOSPUNTOS DOSPUNTOS PRINT IGUAL ciclo:cc END PUNTOYCOMA {:String dec=funciones.saltos.recepcion((LinkedList<Object>)cc);funciones.saltos.lista_general.add(dec);:} 
;

ntexp ::= IDENTIFICADOR:ni {:RESULT=funciones.reportes.busqueda(ni);:}
        |CADENA:c {:RESULT=c;:}
        |ENTERO:e   {:RESULT=e;:}
        |DECIMAL:d  {:RESULT=d;:}
        |expresion:exp {:RESULT=exp;:}
        
;

ciclo ::= ntexp:nt             
{:LinkedList<Object> listaciclo = new LinkedList<Object>();
listaciclo.add(nt); RESULT = (LinkedList<Object>)listaciclo;:}
        |ntexp:ne COMA ciclo:clo  
{:LinkedList<Object> listaexpresion = new LinkedList<Object>();
listaexpresion.add(ne); listaexpresion.addAll((LinkedList)clo);
RESULT = (LinkedList<Object>)listaexpresion;:}
;


//----------------------------------------GRAFICAS

declaracionlinea ::= GRAPHLINE PARENTESIS_A  instruccionlinea PARENTESIS_C END PUNTOYCOMA {::}   
;


declaracionbarras ::= GRAPHBAR PARENTESIS_A  instruccionbarras PARENTESIS_C END PUNTOYCOMA {::}   
;

instruccionbarras ::= instruccionbarras contenidobarras {::}
        |contenidobarras {::}
;
contenidobarras ::= TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA {::}
        |TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
        |TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA 
        |EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL   datosgraficas  END PUNTOYCOMA 
        |EJEY DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL  datosgraficas  END PUNTOYCOMA 
        |EXEC GRAPHBAR END PUNTOYCOMA
;

elementosejey::= valory {::}
        |elementosejey COMA valory {::}
;

valory ::= ENTERO            {::}
        |DECIMAL             {::}
        |IDENTIFICADOR       {::}
;
elementosejex::= datox              {::}
        |elementosejex COMA datox   {::}
;

datox ::= CADENA {::}
        
;


declaracionhistograma ::= HISTOGRAM PARENTESIS_A  instruccionhistograma PARENTESIS_C END PUNTOYCOMA {::}       
;

instruccionhistograma ::= instruccionhistograma contenidohistograma {::}
        |contenidohistograma {::}
;

contenidohistograma ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas:dg END PUNTOYCOMA {:funciones.graficas.titulo=dg.toString();:}
        |VALUES DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas:dt END PUNTOYCOMA {:Object[] hist = funciones.reportes.arreglos((LinkedList)dt);
double[] doubles = Arrays.stream(hist)
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray();
funciones.estadisticas.calcularFrecuenciass((double[])doubles); funciones.graficas.values=(double[])doubles;:}
        |EXEC HISTOGRAM END PUNTOYCOMA {:funciones.graficas.histograma();funciones.graficas.imageFiles.add(funciones.graficas.histograma());funciones.graficas.limpiarParametros();:}
;

elementoshistograma::= valorhistograma {::}
        |elementoshistograma COMA valorhistograma {::}
;

valorhistograma ::= ENTERO {::}
        |DECIMAL           {::}
;




declaracionlinea ::= GRAPHLINE PARENTESIS_A PARENTESIS_C END PUNTOYCOMA   {::}
;

instruccionlinea ::= instruccionlinea contenidolinea {::}
        |contenidolinea {::}
;
contenidolinea ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas  END PUNTOYCOMA {::} 
        |EJEX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL   datosgraficas  END PUNTOYCOMA {::}
        |EJEY DOSPUNTOS DOSPUNTOS  R_DOUBLE IGUAL   datosgraficas  END PUNTOYCOMA {::}
        |TITULOX DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA{::}
        |TITULOY DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE  CORCHETE_CIERRA IGUAL datosgraficas END PUNTOYCOMA{::}
        |EXEC GRAPHLINE END PUNTOYCOMA {::}
;
elementoslinea::= valorlinea {::}
        |elementoslinea COMA valorlinea {::}
;

valorlinea ::= ENTERO {::}
        |DECIMAL      {::}
;

elementoslineac::= datoslineac {::}
        |elementoslineac COMA datoslineac {::}
        |datosgraficas      {::}
;

datoslineac ::= CADENA   {::}
        
;

declaracionpie::= GRAPHPIE PARENTESIS_A instrucciongrafica PARENTESIS_C END PUNTOYCOMA   {::}
;


instrucciongrafica ::= instrucciongrafica contenidopie {::}
        |contenidopie {::}
;

contenidopie ::= TITULO DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas:t  END PUNTOYCOMA {:funciones.graficas.titulo=t.toString();:}
        |VALUES DOSPUNTOS DOSPUNTOS R_DOUBLE IGUAL datosgraficas:dt  END PUNTOYCOMA{:Object[] gp = funciones.reportes.arreglos((LinkedList)dt);
double[] doubles = Arrays.stream(gp)
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray(); funciones.graficas.values=(double[])doubles;:}
        |LABEL DOSPUNTOS DOSPUNTOS R_CHAR CORCHETE_ABRE CORCHETE_CIERRA IGUAL datosgraficas:l END PUNTOYCOMA{:Object[] gp = funciones.reportes.arreglos((LinkedList)l);String[] strings = Arrays.stream(gp)
                                 .map(Object::toString)
                                 .toArray(String[]::new);funciones.graficas.label=strings ;:}
        |EXEC GRAPHPIE END PUNTOYCOMA{:funciones.graficas.pie();funciones.graficas.imageFiles.add(funciones.graficas.pie());funciones.graficas.limpiarParametros();:}
;
elementospie::= valorpie {::}
        |elementospie COMA valorpie {::}
;

valorpie ::= ENTERO {::}
        |DECIMAL    {::}
;

elementoslabel::= datoslabel{::}
        |elementoslabel COMA datoslabel {::}
;
datoslabel ::= CADENA {::}
;

//-------------------------------------ARREGLOS----------------------------------------------------------------

arreglos ::= ARR:arr DOSPUNTOS tipodedato:td DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR:identi MENORQUE GUION CORCHETE_ABRE elementos:tdd CORCHETE_CIERRA END PUNTOYCOMA{:Object[] variableo=funciones.reportes.arreglos((LinkedList<Object>)tdd);funciones.reportes.TablaDatosObject(td.toString(),"@"+identi.toString(),(Object[])  variableo,arrright,arrleft);:}
        |ARR:arr DOSPUNTOS tipodedato:td DOSPUNTOS DOSPUNTOS ARROBA IDENTIFICADOR:ident MENORQUE GUION ARROBA:arroba IDENTIFICADOR:identificador END PUNTOYCOMA{:Object[] variable=funciones.reportes.busquedaValor(arroba.toString()+identificador.toString());funciones.reportes.TablaDatosObject(td.toString(),ident.toString(),variable,arrright,arrleft);:}
;

elementos ::= valorexpresion:vexp1 {:LinkedList<Object> le = new LinkedList<Object>();
        le.add(vexp1); RESULT = (LinkedList<Object>)le;:}
        |valorexpresion:ve COMA elementos:e {:LinkedList<Object> listaexpresiones = new LinkedList<Object>();
        listaexpresiones.add(ve); listaexpresiones.addAll((LinkedList)e);
        RESULT = (LinkedList<Object>)listaexpresiones;:}
;


valor ::= DECIMAL           {::}
        |CADENA             {::}
        |IDENTIFICADOR      {::}
        |ENTERO             {::}
;

//--------------------------OPERACIONES--------------------------------------


expresion ::= SUM PARENTESIS_A valorexpresion:a COMA valorexpresion:b PARENTESIS_C {:RESULT=Double.parseDouble(a.toString())+Double.parseDouble(b.toString());:}
            | RES PARENTESIS_A valorexpresion:a COMA valorexpresion:b PARENTESIS_C {:RESULT=Double.parseDouble(a.toString())-Double.parseDouble(b.toString());:}
            | MUL PARENTESIS_A valorexpresion:a COMA valorexpresion:b PARENTESIS_C {:RESULT=Double.parseDouble(a.toString())*Double.parseDouble(b.toString());:}
            | DIV PARENTESIS_A valorexpresion:a COMA valorexpresion:b PARENTESIS_C {:RESULT=Double.parseDouble(a.toString())/Double.parseDouble(b.toString());:}
            | MOD PARENTESIS_A valorexpresion:a COMA valorexpresion:b PARENTESIS_C {:RESULT=Double.parseDouble(a.toString())%Double.parseDouble(b.toString());:}  
            | operacionesnest:nest  {:RESULT=nest;:}
;

valorexpresion ::=  expresion:e     {:RESULT=e;:}
        | DECIMAL:d                 {:RESULT=d;:}
        | IDENTIFICADOR:id          {:RESULT=funciones.reportes.busqueda(id.toString());:}
        | ENTERO:entero             {:RESULT=entero;:}
        | CADENA:charm              {:RESULT=charm;:}
        
        
;

operacionesnest ::= MEDIA PARENTESIS_A arregloexpresiones:arregloexp PARENTESIS_C            {:RESULT=funciones.estadisticas.media((double[]) arregloexp);:}
        |MEDIANA  PARENTESIS_A arregloexpresiones:arregloexp PARENTESIS_C                    {:RESULT=funciones.estadisticas.Mediana((double[]) arregloexp);:}
        |MODA     PARENTESIS_A  arregloexpresiones:arregloexp PARENTESIS_C                   {:RESULT=funciones.estadisticas.Moda((double[]) arregloexp);:}
        |VARIANZA PARENTESIS_A arregloexpresiones:arregloexp PARENTESIS_C                    {:RESULT=funciones.estadisticas.Varianza((double[]) arregloexp);:}
        |MAX      PARENTESIS_A arregloexpresiones:arregloexp PARENTESIS_C                    {:RESULT=funciones.estadisticas.Maximo((double[]) arregloexp);:}
        |MIN      PARENTESIS_A arregloexpresiones:arregloexp PARENTESIS_C                    {:RESULT=funciones.estadisticas.Minimo((double[]) arregloexp);:}
;

arregloexpresiones ::= ARROBA:arroba IDENTIFICADOR:id {:double[] doubles = Arrays.stream(funciones.reportes.busquedaValor(arroba.toString()+id.toString()))
                                 .mapToDouble(obj -> Double.parseDouble(obj.toString()))
                                 .toArray();RESULT=doubles;:}
        | CORCHETE_ABRE elementos:el CORCHETE_CIERRA {:RESULT=el;:}
;


datosgraficas ::= ENTERO:ent            {:RESULT=ent;:}
        |DECIMAL:dec                    {:RESULT=dec;:}
        |CADENA:cad                     {:RESULT=cad;:}
        |ARROBA:arr IDENTIFICADOR:id    {:RESULT=funciones.reportes.busquedaValor(arr.toString()+id.toString());:}
        |IDENTIFICADOR:id               {:RESULT=funciones.reportes.busqueda(id.toString());:}
        | CORCHETE_ABRE elementos:el CORCHETE_CIERRA {:RESULT=el;:}
;
